import { Quaternion, Vector3 } from "../../../Maths/math.vector";
import { _SpatialAudioSubNode } from "../../abstractAudio/subNodes/spatialAudioSubNode";
import type { _WebAudioEngine } from "../webAudioEngine";
import type { IWebAudioInNode } from "../webAudioNode";
/** @internal */
export declare function _CreateSpatialAudioSubNodeAsync(engine: _WebAudioEngine): Promise<_SpatialAudioSubNode>;
/** @internal */
export declare class _SpatialWebAudioSubNode extends _SpatialAudioSubNode {
    private _position;
    private _rotation;
    private _rotationQuaternion;
    private _webAudioRotationQuaternion;
    /** @internal */
    readonly node: PannerNode;
    /** @internal */
    constructor(engine: _WebAudioEngine);
    /** @internal */
    get coneInnerAngle(): number;
    set coneInnerAngle(value: number);
    /** @internal */
    get coneOuterAngle(): number;
    set coneOuterAngle(value: number);
    /** @internal */
    get coneOuterVolume(): number;
    set coneOuterVolume(value: number);
    /** @internal */
    get distanceModel(): "linear" | "inverse" | "exponential";
    set distanceModel(value: "linear" | "inverse" | "exponential");
    /** @internal */
    get maxDistance(): number;
    set maxDistance(value: number);
    /** @internal */
    get panningModel(): "equalpower" | "HRTF";
    set panningModel(value: "equalpower" | "HRTF");
    /** @internal */
    get position(): Vector3;
    set position(value: Vector3);
    /** @internal */
    get referenceDistance(): number;
    set referenceDistance(value: number);
    /** @internal */
    get rolloffFactor(): number;
    set rolloffFactor(value: number);
    /** @internal */
    get rotation(): Vector3;
    set rotation(value: Vector3);
    /** @internal */
    get rotationQuaternion(): Quaternion;
    set rotationQuaternion(value: Quaternion);
    /** @internal */
    get inNode(): AudioNode;
    /** @internal */
    get outNode(): AudioNode;
    protected _connect(node: IWebAudioInNode): boolean;
    protected _disconnect(node: IWebAudioInNode): boolean;
    /** @internal */
    getClassName(): string;
    private _updateRotation;
}
