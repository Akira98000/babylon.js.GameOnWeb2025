import { Matrix, Quaternion, Vector3 } from "../../../Maths/math.vector.js";
import { _SpatialAudioSubNode } from "../../abstractAudio/subNodes/spatialAudioSubNode.js";
import { _SpatialAudioDefaults } from "../../abstractAudio/subProperties/abstractSpatialAudio.js";
const TmpMatrix = Matrix.Zero();
const TmpVector = Vector3.Zero();
function d2r(degrees) {
    return (degrees * Math.PI) / 180;
}
function r2d(radians) {
    return (radians * 180) / Math.PI;
}
/** @internal */
export async function _CreateSpatialAudioSubNodeAsync(engine) {
    return new _SpatialWebAudioSubNode(engine);
}
/** @internal */
export class _SpatialWebAudioSubNode extends _SpatialAudioSubNode {
    /** @internal */
    constructor(engine) {
        super(engine);
        this._position = _SpatialAudioDefaults.position.clone();
        this._rotation = _SpatialAudioDefaults.rotation.clone();
        this._rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        this._webAudioRotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        this.node = new PannerNode(engine.audioContext);
    }
    /** @internal */
    get coneInnerAngle() {
        return d2r(this.node.coneInnerAngle);
    }
    set coneInnerAngle(value) {
        this.node.coneInnerAngle = r2d(value);
    }
    /** @internal */
    get coneOuterAngle() {
        return d2r(this.node.coneOuterAngle);
    }
    set coneOuterAngle(value) {
        this.node.coneOuterAngle = r2d(value);
    }
    /** @internal */
    get coneOuterVolume() {
        return this.node.coneOuterGain;
    }
    set coneOuterVolume(value) {
        this.node.coneOuterGain = value;
    }
    /** @internal */
    get distanceModel() {
        return this.node.distanceModel;
    }
    set distanceModel(value) {
        this.node.distanceModel = value;
        // Wiggle the max distance to make the change take effect.
        const maxDistance = this.node.maxDistance;
        this.node.maxDistance = maxDistance + 0.001;
        this.node.maxDistance = maxDistance;
    }
    /** @internal */
    get maxDistance() {
        return this.node.maxDistance;
    }
    set maxDistance(value) {
        this.node.maxDistance = value;
    }
    /** @internal */
    get panningModel() {
        return this.node.panningModel;
    }
    set panningModel(value) {
        this.node.panningModel = value;
    }
    /** @internal */
    get position() {
        return this._position;
    }
    set position(value) {
        this._position.copyFrom(value);
        this.node.positionX.value = value.x;
        this.node.positionY.value = value.y;
        this.node.positionZ.value = value.z;
    }
    /** @internal */
    get referenceDistance() {
        return this.node.refDistance;
    }
    set referenceDistance(value) {
        this.node.refDistance = value;
    }
    /** @internal */
    get rolloffFactor() {
        return this.node.rolloffFactor;
    }
    set rolloffFactor(value) {
        this.node.rolloffFactor = value;
    }
    /** @internal */
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        this._rotation.copyFrom(value);
        Quaternion.FromEulerAnglesToRef(value.x, value.y, value.z, this._webAudioRotationQuaternion);
        this._updateRotation();
    }
    /** @internal */
    get rotationQuaternion() {
        return this._rotationQuaternion;
    }
    set rotationQuaternion(value) {
        this._rotationQuaternion.copyFrom(value);
        this._webAudioRotationQuaternion.copyFrom(value);
        this._updateRotation();
    }
    /** @internal */
    get inNode() {
        return this.node;
    }
    /** @internal */
    get outNode() {
        return this.node;
    }
    _connect(node) {
        const connected = super._connect(node);
        if (!connected) {
            return false;
        }
        // If the wrapped node is not available now, it will be connected later by the subgraph.
        if (node.inNode) {
            this.node.connect(node.inNode);
        }
        return true;
    }
    _disconnect(node) {
        const disconnected = super._disconnect(node);
        if (!disconnected) {
            return false;
        }
        if (node.inNode) {
            this.node.disconnect(node.inNode);
        }
        return true;
    }
    /** @internal */
    getClassName() {
        return "_SpatialWebAudioSubNode";
    }
    _updateRotation() {
        Matrix.FromQuaternionToRef(this._webAudioRotationQuaternion, TmpMatrix);
        Vector3.TransformNormalToRef(Vector3.Right(), TmpMatrix, TmpVector);
        this.node.orientationX.value = TmpVector.x;
        this.node.orientationY.value = TmpVector.y;
        this.node.orientationZ.value = TmpVector.z;
    }
}
//# sourceMappingURL=spatialWebAudioSubNode.js.map