import { Matrix, Quaternion, Vector3 } from "../../../Maths/math.vector.js";
import { _SpatialAudioListener } from "../../abstractAudio/subProperties/spatialAudioListener.js";
const TmpMatrix = Matrix.Zero();
const TmpQuaternion = new Quaternion();
const TmpVector = Vector3.Zero();
/** @internal */
export function _CreateSpatialAudioListener(engine, autoUpdate) {
    return new _SpatialWebAudioListener(engine, autoUpdate);
}
/**
 * This sub property is not backed by a sub node and all properties are set directly on the audio context listener.
 *
 * @internal
 */
class _SpatialWebAudioListener extends _SpatialAudioListener {
    /** @internal */
    constructor(engine, autoUpdate) {
        super();
        this._autoUpdate = false;
        this._lastPosition = Vector3.Zero();
        this._lastRotation = Vector3.Zero();
        this._lastRotationQuaternion = new Quaternion();
        this._position = Vector3.Zero();
        this._rotation = Vector3.Zero();
        this._rotationQuaternion = new Quaternion();
        this._audioContext = engine.audioContext;
        if (!autoUpdate) {
            return;
        }
        this._autoUpdate = true;
        const update = () => {
            if (!this._autoUpdate) {
                return;
            }
            this.update();
            requestAnimationFrame(update);
        };
        requestAnimationFrame(update);
    }
    /** @internal */
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value;
        this._updatePosition();
    }
    /** @internal */
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        this._rotation = value;
        this._updateRotation();
    }
    /** @internal */
    get rotationQuaternion() {
        return this._rotationQuaternion;
    }
    set rotationQuaternion(value) {
        this._rotationQuaternion = value;
        this._updateRotation();
    }
    /** @internal */
    dispose() {
        super.dispose();
        this._autoUpdate = false;
    }
    /** @internal */
    update() {
        this._updatePosition();
        this._updateRotation();
    }
    _updatePosition() {
        if (this._lastPosition.equalsWithEpsilon(this._position)) {
            return;
        }
        const listener = this._audioContext.listener;
        listener.positionX.value = this._position.x;
        listener.positionY.value = this._position.y;
        listener.positionZ.value = this._position.z;
        this._lastPosition.copyFrom(this._position);
    }
    _updateRotation() {
        if (!this._lastRotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {
            TmpQuaternion.copyFrom(this._rotationQuaternion);
            this._lastRotationQuaternion.copyFrom(this._rotationQuaternion);
        }
        else if (!this._lastRotation.equalsWithEpsilon(this._rotation)) {
            Quaternion.FromEulerAnglesToRef(this._rotation.x, this._rotation.y, this._rotation.z, TmpQuaternion);
            this._lastRotation.copyFrom(this._rotation);
        }
        else {
            return;
        }
        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);
        const listener = this._audioContext.listener;
        Vector3.TransformNormalToRef(Vector3.Forward(), TmpMatrix, TmpVector);
        listener.forwardX.value = TmpVector.x;
        listener.forwardY.value = TmpVector.y;
        listener.forwardZ.value = TmpVector.z;
        Vector3.TransformNormalToRef(Vector3.Up(), TmpMatrix, TmpVector);
        listener.upX.value = TmpVector.x;
        listener.upY.value = TmpVector.y;
        listener.upZ.value = TmpVector.z;
    }
}
//# sourceMappingURL=spatialWebAudioListener.js.map