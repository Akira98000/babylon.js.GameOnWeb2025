{"version":3,"file":"spatialWebAudioListener.js","sourceRoot":"","sources":["../../../../../../dev/core/src/AudioV2/webAudio/subProperties/spatialWebAudioListener.ts"],"names":[],"mappings":"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","sourcesContent":["import { Matrix, Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport { _SpatialAudioListener } from \"../../abstractAudio/subProperties/spatialAudioListener\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\n\nconst TmpMatrix = Matrix.Zero();\nconst TmpQuaternion = new Quaternion();\nconst TmpVector = Vector3.Zero();\n\n/** @internal */\nexport function _CreateSpatialAudioListener(engine: _WebAudioEngine, autoUpdate: boolean): _SpatialAudioListener {\n    return new _SpatialWebAudioListener(engine, autoUpdate);\n}\n\n/**\n * This sub property is not backed by a sub node and all properties are set directly on the audio context listener.\n *\n * @internal\n */\nclass _SpatialWebAudioListener extends _SpatialAudioListener {\n    private _audioContext: AudioContext;\n    private _autoUpdate: boolean = false;\n    private _lastPosition: Vector3 = Vector3.Zero();\n    private _lastRotation: Vector3 = Vector3.Zero();\n    private _lastRotationQuaternion: Quaternion = new Quaternion();\n    private _position: Vector3 = Vector3.Zero();\n    private _rotation: Vector3 = Vector3.Zero();\n    private _rotationQuaternion: Quaternion = new Quaternion();\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine, autoUpdate: boolean) {\n        super();\n\n        this._audioContext = engine.audioContext;\n\n        if (!autoUpdate) {\n            return;\n        }\n\n        this._autoUpdate = true;\n\n        const update = () => {\n            if (!this._autoUpdate) {\n                return;\n            }\n\n            this.update();\n            requestAnimationFrame(update);\n        };\n\n        requestAnimationFrame(update);\n    }\n\n    /** @internal */\n    public get position(): Vector3 {\n        return this._position;\n    }\n\n    public set position(value: Vector3) {\n        this._position = value;\n        this._updatePosition();\n    }\n\n    /** @internal */\n    public get rotation(): Vector3 {\n        return this._rotation;\n    }\n\n    public set rotation(value: Vector3) {\n        this._rotation = value;\n        this._updateRotation();\n    }\n\n    /** @internal */\n    public get rotationQuaternion(): Quaternion {\n        return this._rotationQuaternion;\n    }\n\n    public set rotationQuaternion(value: Quaternion) {\n        this._rotationQuaternion = value;\n        this._updateRotation();\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._autoUpdate = false;\n    }\n\n    /** @internal */\n    public update(): void {\n        this._updatePosition();\n        this._updateRotation();\n    }\n\n    private _updatePosition(): void {\n        if (this._lastPosition.equalsWithEpsilon(this._position)) {\n            return;\n        }\n\n        const listener = this._audioContext.listener;\n        listener.positionX.value = this._position.x;\n        listener.positionY.value = this._position.y;\n        listener.positionZ.value = this._position.z;\n\n        this._lastPosition.copyFrom(this._position);\n    }\n\n    private _updateRotation(): void {\n        if (!this._lastRotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {\n            TmpQuaternion.copyFrom(this._rotationQuaternion);\n            this._lastRotationQuaternion.copyFrom(this._rotationQuaternion);\n        } else if (!this._lastRotation.equalsWithEpsilon(this._rotation)) {\n            Quaternion.FromEulerAnglesToRef(this._rotation.x, this._rotation.y, this._rotation.z, TmpQuaternion);\n            this._lastRotation.copyFrom(this._rotation);\n        } else {\n            return;\n        }\n\n        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);\n        const listener = this._audioContext.listener;\n\n        Vector3.TransformNormalToRef(Vector3.Forward(), TmpMatrix, TmpVector);\n        listener.forwardX.value = TmpVector.x;\n        listener.forwardY.value = TmpVector.y;\n        listener.forwardZ.value = TmpVector.z;\n\n        Vector3.TransformNormalToRef(Vector3.Up(), TmpMatrix, TmpVector);\n        listener.upX.value = TmpVector.x;\n        listener.upY.value = TmpVector.y;\n        listener.upZ.value = TmpVector.z;\n    }\n}\n"]}