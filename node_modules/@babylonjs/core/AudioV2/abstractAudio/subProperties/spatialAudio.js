import { _GetSpatialAudioProperty, _GetSpatialAudioSubNode, _SetSpatialAudioProperty } from "../subNodes/spatialAudioSubNode.js";
import { _SpatialAudioDefaults, AbstractSpatialAudio } from "./abstractSpatialAudio.js";
/** @internal */
export class _SpatialAudio extends AbstractSpatialAudio {
    /** @internal */
    constructor(subGraph) {
        super();
        this._position = _SpatialAudioDefaults.position.clone();
        this._rotation = _SpatialAudioDefaults.rotation.clone();
        this._rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        this._subGraph = subGraph;
    }
    /** @internal */
    get coneInnerAngle() {
        return _GetSpatialAudioProperty(this._subGraph, "coneInnerAngle") ?? _SpatialAudioDefaults.coneInnerAngle;
    }
    set coneInnerAngle(value) {
        _SetSpatialAudioProperty(this._subGraph, "coneInnerAngle", value);
    }
    /** @internal */
    get coneOuterAngle() {
        return _GetSpatialAudioProperty(this._subGraph, "coneOuterAngle") ?? _SpatialAudioDefaults.coneOuterAngle;
    }
    set coneOuterAngle(value) {
        _SetSpatialAudioProperty(this._subGraph, "coneOuterAngle", value);
    }
    /** @internal */
    get coneOuterVolume() {
        return _GetSpatialAudioProperty(this._subGraph, "coneOuterVolume") ?? _SpatialAudioDefaults.coneOuterVolume;
    }
    set coneOuterVolume(value) {
        _SetSpatialAudioProperty(this._subGraph, "coneOuterVolume", value);
    }
    /** @internal */
    get distanceModel() {
        return _GetSpatialAudioProperty(this._subGraph, "distanceModel") ?? _SpatialAudioDefaults.distanceModel;
    }
    set distanceModel(value) {
        _SetSpatialAudioProperty(this._subGraph, "distanceModel", value);
    }
    /** @internal */
    get maxDistance() {
        return _GetSpatialAudioProperty(this._subGraph, "maxDistance") ?? _SpatialAudioDefaults.maxDistance;
    }
    set maxDistance(value) {
        if (value <= 0) {
            value = 0.000001;
        }
        _SetSpatialAudioProperty(this._subGraph, "maxDistance", value);
    }
    /** @internal */
    get panningModel() {
        return _GetSpatialAudioProperty(this._subGraph, "panningModel") ?? _SpatialAudioDefaults.panningModel;
    }
    set panningModel(value) {
        _SetSpatialAudioProperty(this._subGraph, "panningModel", value);
    }
    /** @internal */
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value;
        this._updatePosition();
    }
    /** @internal */
    get referenceDistance() {
        return _GetSpatialAudioProperty(this._subGraph, "referenceDistance") ?? _SpatialAudioDefaults.referenceDistance;
    }
    set referenceDistance(value) {
        _SetSpatialAudioProperty(this._subGraph, "referenceDistance", value);
    }
    /** @internal */
    get rolloffFactor() {
        return _GetSpatialAudioProperty(this._subGraph, "rolloffFactor") ?? _SpatialAudioDefaults.rolloffFactor;
    }
    set rolloffFactor(value) {
        _SetSpatialAudioProperty(this._subGraph, "rolloffFactor", value);
    }
    /** @internal */
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        this._rotation = value;
        this._updateRotation();
    }
    /** @internal */
    get rotationQuaternion() {
        return this._rotationQuaternion;
    }
    set rotationQuaternion(value) {
        this._rotationQuaternion = value;
        this._updateRotation();
    }
    /** @internal */
    update() {
        const subNode = _GetSpatialAudioSubNode(this._subGraph);
        this._updatePosition(subNode);
        this._updateRotation(subNode);
    }
    _updatePosition(subNode = null) {
        if (!subNode) {
            subNode = _GetSpatialAudioSubNode(this._subGraph);
            if (!subNode) {
                return;
            }
        }
        const position = subNode.position;
        if (!position.equalsWithEpsilon(this._position)) {
            subNode.position = this._position;
        }
    }
    _updateRotation(subNode = null) {
        if (!subNode) {
            subNode = _GetSpatialAudioSubNode(this._subGraph);
            if (!subNode) {
                return;
            }
        }
        if (!subNode.rotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {
            subNode.rotationQuaternion = this._rotationQuaternion;
        }
        else if (!subNode.rotation.equalsWithEpsilon(this._rotation)) {
            subNode.rotation = this._rotation;
        }
    }
}
//# sourceMappingURL=spatialAudio.js.map