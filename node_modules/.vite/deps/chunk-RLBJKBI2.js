import {
  init_hdrFilteringFunctions,
  init_importanceSampling
} from "./chunk-QWYOILA5.js";
import {
  init_pbrBRDFFunctions
} from "./chunk-IBCY4ZIZ.js";
import {
  init_helperFunctions
} from "./chunk-E7XGMC4A.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/ShadersWGSL/hdrIrradianceFiltering.fragment.js
var name, shader, hdrIrradianceFilteringPixelShaderWGSL;
var init_hdrIrradianceFiltering_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/hdrIrradianceFiltering.fragment.js"() {
    init_shaderStore();
    init_helperFunctions();
    init_importanceSampling();
    init_pbrBRDFFunctions();
    init_hdrFilteringFunctions();
    name = "hdrIrradianceFilteringPixelShader";
    shader = `#include<helperFunctions>
#include<importanceSampling>
#include<pbrBRDFFunctions>
#include<hdrFilteringFunctions>
var inputTextureSampler: sampler;var inputTexture: texture_cube<f32>;
#ifdef IBL_CDF_FILTERING
var icdfTextureSampler: sampler;var icdfTexture: texture_2d<f32>;
#endif
uniform vFilteringInfo: vec2f;uniform hdrScale: f32;varying direction: vec3f;@fragment
fn main(input: FragmentInputs)->FragmentOutputs {var color: vec3f=irradiance(inputTexture,inputTextureSampler,input.direction,uniforms.vFilteringInfo
#ifdef IBL_CDF_FILTERING
,icdfTexture,icdfTextureSampler
#endif
);fragmentOutputs.color= vec4f(color*uniforms.hdrScale,1.0);}`;
    ShaderStore.ShadersStoreWGSL[name] = shader;
    hdrIrradianceFilteringPixelShaderWGSL = { name, shader };
  }
});

export {
  hdrIrradianceFilteringPixelShaderWGSL,
  init_hdrIrradianceFiltering_fragment
};
//# sourceMappingURL=chunk-RLBJKBI2.js.map
