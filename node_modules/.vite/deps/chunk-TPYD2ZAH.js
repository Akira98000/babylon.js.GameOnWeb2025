import {
  init_logDepthFragment
} from "./chunk-7HP6UJTL.js";
import {
  init_fogFragment
} from "./chunk-L7GU2SFE.js";
import {
  init_fogFragmentDeclaration
} from "./chunk-J53MWIJE.js";
import {
  init_logDepthDeclaration
} from "./chunk-Q3NFSGSZ.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingCompatibility.js
var name, shader;
var init_imageProcessingCompatibility = __esm({
  "node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingCompatibility.js"() {
    init_shaderStore();
    name = "imageProcessingCompatibility";
    shader = `#ifdef IMAGEPROCESSINGPOSTPROCESS
gl_FragColor.rgb=pow(gl_FragColor.rgb,vec3(2.2));
#endif
`;
    ShaderStore.IncludesShadersStore[name] = shader;
  }
});

// node_modules/@babylonjs/core/Shaders/sprites.fragment.js
var name2, shader2, spritesPixelShader;
var init_sprites_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/sprites.fragment.js"() {
    init_shaderStore();
    init_fogFragmentDeclaration();
    init_logDepthDeclaration();
    init_logDepthFragment();
    init_fogFragment();
    init_imageProcessingCompatibility();
    name2 = "spritesPixelShader";
    shader2 = `#ifdef LOGARITHMICDEPTH
#extension GL_EXT_frag_depth : enable
#endif
uniform bool alphaTest;varying vec4 vColor;varying vec2 vUV;uniform sampler2D diffuseSampler;
#include<fogFragmentDeclaration>
#include<logDepthDeclaration>
#define CUSTOM_FRAGMENT_DEFINITIONS
#ifdef PIXEL_PERFECT
vec2 uvPixelPerfect(vec2 uv) {vec2 res=vec2(textureSize(diffuseSampler,0));uv=uv*res;vec2 seam=floor(uv+0.5);uv=seam+clamp((uv-seam)/fwidth(uv),-0.5,0.5);return uv/res;}
#endif
void main(void) {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
#ifdef PIXEL_PERFECT
vec2 uv=uvPixelPerfect(vUV);
#else
vec2 uv=vUV;
#endif
vec4 color=texture2D(diffuseSampler,uv);float fAlphaTest=float(alphaTest);if (fAlphaTest != 0.)
{if (color.a<0.95)
discard;}
color*=vColor;
#include<logDepthFragment>
#include<fogFragment>
gl_FragColor=color;
#include<imageProcessingCompatibility>
#define CUSTOM_FRAGMENT_MAIN_END
}`;
    ShaderStore.ShadersStore[name2] = shader2;
    spritesPixelShader = { name: name2, shader: shader2 };
  }
});

export {
  init_imageProcessingCompatibility,
  spritesPixelShader,
  init_sprites_fragment
};
//# sourceMappingURL=chunk-TPYD2ZAH.js.map
