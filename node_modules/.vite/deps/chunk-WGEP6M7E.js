import {
  init_vertexColorMixing
} from "./chunk-PUN4GK63.js";
import {
  init_instancesDeclaration
} from "./chunk-42JLCGHG.js";
import {
  init_instancesVertex
} from "./chunk-AD2BDCGE.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-ZCX6R6OU.js";
import {
  init_bonesVertex
} from "./chunk-UNPOS5SC.js";
import {
  init_bonesDeclaration
} from "./chunk-4HQUZNQB.js";
import {
  init_fogVertex
} from "./chunk-R5KO6XAE.js";
import {
  init_fogVertexDeclaration
} from "./chunk-R3M4YTYC.js";
import {
  init_clipPlaneVertex
} from "./chunk-PMBT47KA.js";
import {
  init_clipPlaneVertexDeclaration
} from "./chunk-ALCMBW77.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/Shaders/color.vertex.js
var name, shader, colorVertexShader;
var init_color_vertex = __esm({
  "node_modules/@babylonjs/core/Shaders/color.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_clipPlaneVertexDeclaration();
    init_fogVertexDeclaration();
    init_instancesDeclaration();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    init_clipPlaneVertex();
    init_fogVertex();
    init_vertexColorMixing();
    name = "colorVertexShader";
    shader = `attribute vec3 position;
#ifdef VERTEXCOLOR
attribute vec4 color;
#endif
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<clipPlaneVertexDeclaration>
#include<fogVertexDeclaration>
#ifdef FOG
uniform mat4 view;
#endif
#include<instancesDeclaration>
uniform mat4 viewProjection;
#ifdef MULTIVIEW
uniform mat4 viewProjectionR;
#endif
#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)
varying vec4 vColor;
#endif
#define CUSTOM_VERTEX_DEFINITIONS
void main(void) {
#define CUSTOM_VERTEX_MAIN_BEGIN
#ifdef VERTEXCOLOR
vec4 colorUpdated=color;
#endif
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
vec4 worldPos=finalWorld*vec4(position,1.0);
#ifdef MULTIVIEW
if (gl_ViewID_OVR==0u) {gl_Position=viewProjection*worldPos;} else {gl_Position=viewProjectionR*worldPos;}
#else
gl_Position=viewProjection*worldPos;
#endif
#include<clipPlaneVertex>
#include<fogVertex>
#include<vertexColorMixing>
#define CUSTOM_VERTEX_MAIN_END
}`;
    ShaderStore.ShadersStore[name] = shader;
    colorVertexShader = { name, shader };
  }
});

export {
  colorVertexShader,
  init_color_vertex
};
//# sourceMappingURL=chunk-WGEP6M7E.js.map
