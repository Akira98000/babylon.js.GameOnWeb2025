{
  "version": 3,
  "sources": ["../../../dev/core/src/Animations/animationRange.ts", "../../../dev/core/src/node.ts", "../../../dev/core/src/Animations/animation.ts"],
  "sourcesContent": ["/**\r\n * Represents the range of an animation\r\n */\r\nexport class AnimationRange {\r\n    /**\r\n     * Initializes the range of an animation\r\n     * @param name The name of the animation range\r\n     * @param from The starting frame of the animation\r\n     * @param to The ending frame of the animation\r\n     */\r\n    constructor(\r\n        /**The name of the animation range**/\r\n        public name: string,\r\n        /**The starting frame of the animation */\r\n        public from: number,\r\n        /**The ending frame of the animation*/\r\n        public to: number\r\n    ) {}\r\n\r\n    /**\r\n     * Makes a copy of the animation range\r\n     * @returns A copy of the animation range\r\n     */\r\n    public clone(): AnimationRange {\r\n        return new AnimationRange(this.name, this.from, this.to);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Scene } from \"./scene\";\r\nimport type { Nullable } from \"./types\";\r\nimport { Matrix, Vector3 } from \"./Maths/math.vector\";\r\nimport type { AbstractEngine } from \"./Engines/abstractEngine\";\r\nimport type { IBehaviorAware, Behavior } from \"./Behaviors/behavior\";\r\nimport { serialize } from \"./Misc/decorators\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport { Observable } from \"./Misc/observable\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport { _WarnImport } from \"./Misc/devTools\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { IInspectable } from \"./Misc/iInspectable\";\r\nimport type { IAccessibilityTag } from \"./IAccessibilityTag\";\r\nimport type { AnimationRange } from \"./Animations/animationRange\";\r\nimport type { AnimationPropertiesOverride } from \"./Animations/animationPropertiesOverride\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { Animation } from \"./Animations/animation\";\r\nimport type { Animatable } from \"./Animations/animatable.core\";\r\nimport { SerializationHelper } from \"./Misc/decorators.serialization\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\n\r\n/**\r\n * Defines how a node can be built from a string name.\r\n */\r\nexport type NodeConstructor = (name: string, scene: Scene, options?: any) => () => Node;\r\n\r\n/** @internal */\r\nclass _InternalNodeDataInfo {\r\n    public _doNotSerialize = false;\r\n    public _isDisposed = false;\r\n    public _sceneRootNodesIndex = -1;\r\n    public _isEnabled = true;\r\n    public _isParentEnabled = true;\r\n    public _isReady = true;\r\n    public _onEnabledStateChangedObservable = new Observable<boolean>();\r\n    public _onClonedObservable = new Observable<Node>();\r\n}\r\n\r\n/**\r\n * Node is the basic class for all scene objects (Mesh, Light, Camera.)\r\n */\r\nexport class Node implements IBehaviorAware<Node> {\r\n    protected _isDirty = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _AnimationRangeFactory = (_name: string, _from: number, _to: number): AnimationRange => {\r\n        throw _WarnImport(\"AnimationRange\");\r\n    };\r\n\r\n    private static _NodeConstructors: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * Add a new node constructor\r\n     * @param type defines the type name of the node to construct\r\n     * @param constructorFunc defines the constructor function\r\n     */\r\n    public static AddNodeConstructor(type: string, constructorFunc: NodeConstructor) {\r\n        this._NodeConstructors[type] = constructorFunc;\r\n    }\r\n\r\n    /**\r\n     * Returns a node constructor based on type name\r\n     * @param type defines the type name\r\n     * @param name defines the new node name\r\n     * @param scene defines the hosting scene\r\n     * @param options defines optional options to transmit to constructors\r\n     * @returns the new constructor or null\r\n     */\r\n    public static Construct(type: string, name: string, scene: Scene, options?: any): Nullable<() => Node> {\r\n        const constructorFunc = this._NodeConstructors[type];\r\n\r\n        if (!constructorFunc) {\r\n            return null;\r\n        }\r\n\r\n        return constructorFunc(name, scene, options);\r\n    }\r\n\r\n    private _nodeDataStorage = new _InternalNodeDataInfo();\r\n\r\n    /**\r\n     * Gets or sets the name of the node\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets the id of the node\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a string used to store user defined state for the node\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** @internal */\r\n    public _internalMetadata: any;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the node for accessibility purpose.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    /**\r\n     * Observable fired when an accessibility tag is changed\r\n     */\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * Gets or sets a boolean used to define if the node must be serialized\r\n     */\r\n    public get doNotSerialize() {\r\n        if (this._nodeDataStorage._doNotSerialize) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode) {\r\n            return this._parentNode.doNotSerialize;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public set doNotSerialize(value: boolean) {\r\n        this._nodeDataStorage._doNotSerialize = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the node\r\n     */\r\n    public animations: Animation[] = [];\r\n    protected _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * Callback raised when the node is ready to be used\r\n     */\r\n    public onReady: Nullable<(node: Node) => void> = null;\r\n\r\n    /** @internal */\r\n    public _currentRenderId = -1;\r\n    private _parentUpdateId = -1;\r\n    /** @internal */\r\n    public _childUpdateId = -1;\r\n\r\n    /** @internal */\r\n    public _waitingParentId: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParentInstanceIndex: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParsedUniqueId: Nullable<number> = null;\r\n    /** @internal */\r\n    public _scene: Scene;\r\n    /** @internal */\r\n    public _cache: any = {};\r\n\r\n    protected _parentNode: Nullable<Node> = null;\r\n\r\n    /** @internal */\r\n    protected _children: Nullable<Node[]> = null;\r\n\r\n    /** @internal */\r\n    public _worldMatrix = Matrix.Identity();\r\n    /** @internal */\r\n    public _worldMatrixDeterminant = 0;\r\n    /** @internal */\r\n    public _worldMatrixDeterminantIsDirty = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if the node has been disposed\r\n     * @returns true if the node was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._nodeDataStorage._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the parent of the node (without keeping the current position in the scene)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\r\n     */\r\n    public set parent(parent: Nullable<Node>) {\r\n        if (this._parentNode === parent) {\r\n            return;\r\n        }\r\n\r\n        const previousParentNode = this._parentNode;\r\n\r\n        // Remove self from list of children of parent\r\n        if (this._parentNode && this._parentNode._children !== undefined && this._parentNode._children !== null) {\r\n            const index = this._parentNode._children.indexOf(this);\r\n            if (index !== -1) {\r\n                this._parentNode._children.splice(index, 1);\r\n            }\r\n\r\n            if (!parent && !this._nodeDataStorage._isDisposed) {\r\n                this._addToSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Store new parent\r\n        this._parentNode = parent;\r\n        this._isDirty = true;\r\n\r\n        // Add as child to new parent\r\n        if (this._parentNode) {\r\n            if (this._parentNode._children === undefined || this._parentNode._children === null) {\r\n                this._parentNode._children = new Array<Node>();\r\n            }\r\n            this._parentNode._children.push(this);\r\n\r\n            if (!previousParentNode) {\r\n                this._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Enabled state\r\n        this._syncParentEnabledState();\r\n    }\r\n\r\n    public get parent(): Nullable<Node> {\r\n        return this._parentNode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _serializeAsParent(serializationObject: any): void {\r\n        serializationObject.parentId = this.uniqueId;\r\n    }\r\n\r\n    /** @internal */\r\n    public _addToSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex === -1) {\r\n            this._nodeDataStorage._sceneRootNodesIndex = this._scene.rootNodes.length;\r\n            this._scene.rootNodes.push(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _removeFromSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex !== -1) {\r\n            const rootNodes = this._scene.rootNodes;\r\n            const lastIdx = rootNodes.length - 1;\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex] = rootNodes[lastIdx];\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex]._nodeDataStorage._sceneRootNodesIndex = this._nodeDataStorage._sceneRootNodesIndex;\r\n            this._scene.rootNodes.pop();\r\n            this._nodeDataStorage._sceneRootNodesIndex = -1;\r\n        }\r\n    }\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"Node\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"Node\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isNode = true;\r\n\r\n    /**\r\n     * An event triggered when the mesh is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Node>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Node>> = null;\r\n    /**\r\n     * Sets a callback that will be raised when the node will be disposed\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the enabled state of the node changes\r\n     */\r\n    public get onEnabledStateChangedObservable(): Observable<boolean> {\r\n        return this._nodeDataStorage._onEnabledStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the node is cloned\r\n     */\r\n    public get onClonedObservable(): Observable<Node> {\r\n        return this._nodeDataStorage._onClonedObservable;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Node\r\n     * @param name the name and id to be given to this node\r\n     * @param scene the scene this node will be added to\r\n     * @param isPure indicates this Node is just a Node, and not a derived class like Mesh or Camera\r\n     */\r\n    public constructor(name: string, scene: Nullable<Scene> = null, isPure = true) {\r\n        this.name = name;\r\n        this.id = name;\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._initCache();\r\n\r\n        if (isPure) {\r\n            this._addToSceneRootNodes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the scene of the node\r\n     * @returns a scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the engine of the node\r\n     * @returns a Engine\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._scene.getEngine();\r\n    }\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Node>>();\r\n\r\n    /**\r\n     * Attach a behavior to the node\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @param attachImmediately defines that the behavior must be attached even if the scene is still loading\r\n     * @returns the current Node\r\n     */\r\n    public addBehavior(behavior: Behavior<Node>, attachImmediately = false): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        if (this._scene.isLoading && !attachImmediately) {\r\n            // We defer the attach when the scene will be loaded\r\n            this._scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current Node\r\n     */\r\n    public removeBehavior(behavior: Behavior<Node>): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Node>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Node>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest update of the World matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._currentRenderId !== this._scene.getRenderId()) {\r\n            this.computeWorldMatrix();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._worldMatrixDeterminantIsDirty) {\r\n            this._worldMatrixDeterminantIsDirty = false;\r\n            this._worldMatrixDeterminant = this._worldMatrix.determinant();\r\n        }\r\n        return this._worldMatrixDeterminant;\r\n    }\r\n\r\n    /**\r\n     * Returns directly the latest state of the mesh World matrix.\r\n     * A Matrix is returned.\r\n     */\r\n    public get worldMatrixFromCache(): Matrix {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method\r\n    /** @internal */\r\n    public _initCache() {\r\n        this._cache = {};\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public updateCache(force?: boolean): void {\r\n        if (!force && this.isSynchronized()) {\r\n            return;\r\n        }\r\n\r\n        this._updateCache();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getActionManagerForTrigger(trigger?: number, _initialCall = true): Nullable<AbstractActionManager> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method if !ignoreParentClass\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(_ignoreParentClass?: boolean): void {}\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSyncedWithParent() {\r\n        if (this._parentNode) {\r\n            this._parentUpdateId = this._parentNode._childUpdateId;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronizedWithParent(): boolean {\r\n        if (!this._parentNode) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode._isDirty || this._parentUpdateId !== this._parentNode._childUpdateId) {\r\n            return false;\r\n        }\r\n\r\n        return this._parentNode.isSynchronized();\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronized(): boolean {\r\n        if (this._parentNode && !this.isSynchronizedWithParent()) {\r\n            return false;\r\n        }\r\n\r\n        return this._isSynchronized();\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param _completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns true if the node is ready\r\n     */\r\n    public isReady(_completeCheck = false): boolean {\r\n        return this._nodeDataStorage._isReady;\r\n    }\r\n\r\n    /**\r\n     * Flag the  node as dirty (Forcing it to update everything)\r\n     * @param _property helps children apply precise \"dirtyfication\"\r\n     * @returns this node\r\n     */\r\n    public markAsDirty(_property?: string): Node {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Is this node enabled?\r\n     * If the node has a parent, all ancestors will be checked and false will be returned if any are false (not enabled), otherwise will return true\r\n     * @param checkAncestors indicates if this method should check the ancestors. The default is to check the ancestors. If set to false, the method will return the value of this node without checking ancestors\r\n     * @returns whether this node (and its parent) is enabled\r\n     */\r\n    public isEnabled(checkAncestors: boolean = true): boolean {\r\n        if (checkAncestors === false) {\r\n            return this._nodeDataStorage._isEnabled;\r\n        }\r\n\r\n        if (!this._nodeDataStorage._isEnabled) {\r\n            return false;\r\n        }\r\n\r\n        return this._nodeDataStorage._isParentEnabled;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        this._nodeDataStorage._isParentEnabled = this._parentNode ? this._parentNode.isEnabled() : true;\r\n\r\n        if (this._children) {\r\n            this._children.forEach((c) => {\r\n                c._syncParentEnabledState(); // Force children to update accordingly\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node\r\n     * @param value defines the new enabled state\r\n     */\r\n    public setEnabled(value: boolean): void {\r\n        if (this._nodeDataStorage._isEnabled === value) {\r\n            return;\r\n        }\r\n        this._nodeDataStorage._isEnabled = value;\r\n        this._syncParentEnabledState();\r\n        this._nodeDataStorage._onEnabledStateChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Is this node a descendant of the given node?\r\n     * The function will iterate up the hierarchy until the ancestor was found or no more parents defined\r\n     * @param ancestor defines the parent node to inspect\r\n     * @returns a boolean indicating if this node is a descendant of the given node\r\n     */\r\n    public isDescendantOf(ancestor: Node): boolean {\r\n        if (this.parent) {\r\n            if (this.parent === ancestor) {\r\n                return true;\r\n            }\r\n\r\n            return this.parent.isDescendantOf(ancestor);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDescendants(results: Node[], directDescendantsOnly: boolean = false, predicate?: (node: Node) => boolean): void {\r\n        if (!this._children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            const item = this._children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants<T extends Node>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[] {\r\n        const results: Node[] = [];\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes<T extends AbstractMesh>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[] {\r\n        const results: Array<AbstractMesh> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && (<AbstractMesh>node).cullingStrategy !== undefined;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren<T extends Node>(predicate?: (node: Node) => node is T, directDescendantsOnly?: boolean): T[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly?: boolean): Node[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly = true): Node[] {\r\n        return this.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setReady(state: boolean): void {\r\n        if (state === this._nodeDataStorage._isReady) {\r\n            return;\r\n        }\r\n\r\n        if (!state) {\r\n            this._nodeDataStorage._isReady = false;\r\n            return;\r\n        }\r\n\r\n        if (this.onReady) {\r\n            this.onReady(this);\r\n        }\r\n        this._nodeDataStorage._isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get an animation by name\r\n     * @param name defines the name of the animation to look for\r\n     * @returns null if not found else the requested animation\r\n     */\r\n    public getAnimationByName(name: string): Nullable<Animation> {\r\n        for (let i = 0; i < this.animations.length; i++) {\r\n            const animation = this.animations[i];\r\n\r\n            if (animation.name === name) {\r\n                return animation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range for this node\r\n     * @param name defines the name of the range\r\n     * @param from defines the starting key\r\n     * @param to defines the end key\r\n     */\r\n    public createAnimationRange(name: string, from: number, to: number): void {\r\n        // check name not already in use\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = Node._AnimationRangeFactory(name, from, to);\r\n            for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n                if (this.animations[i]) {\r\n                    this.animations[i].createRange(name, from, to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a specific animation range\r\n     * @param name defines the name of the range to delete\r\n     * @param deleteFrames defines if animation frames from the range must be deleted as well\r\n     */\r\n    public deleteAnimationRange(name: string, deleteFrames = true): void {\r\n        for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n            if (this.animations[i]) {\r\n                this.animations[i].deleteRange(name, deleteFrames);\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Get an animation range by name\r\n     * @param name defines the name of the animation range to look for\r\n     * @returns null if not found else the requested animation range\r\n     */\r\n    public getAnimationRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name] || null;\r\n    }\r\n\r\n    /**\r\n     * Clone the current node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<Node> {\r\n        const result = SerializationHelper.Clone(() => new Node(name, this.getScene()), this);\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                child.clone(name + \".\" + child.name, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all animation ranges defined on this node\r\n     * @returns an array\r\n     */\r\n    public getAnimationRanges(): Nullable<AnimationRange>[] {\r\n        const animationRanges: Nullable<AnimationRange>[] = [];\r\n        let name: string;\r\n        for (name in this._ranges) {\r\n            animationRanges.push(this._ranges[name]);\r\n        }\r\n        return animationRanges;\r\n    }\r\n\r\n    /**\r\n     * Will start the animation sequence\r\n     * @param name defines the range frames for animation sequence\r\n     * @param loop defines if the animation should loop (false by default)\r\n     * @param speedRatio defines the speed factor in which to run the animation (1 by default)\r\n     * @param onAnimationEnd defines a function to be executed when the animation ended (undefined by default)\r\n     * @returns the object created for this animation. If range does not exist, it will return null\r\n     */\r\n    public beginAnimation(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n        const range = this.getAnimationRange(name);\r\n\r\n        if (!range) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Serialize animation ranges into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serializeAnimationRanges(): any {\r\n        const serializationRanges = [];\r\n        for (const name in this._ranges) {\r\n            const localRange = this._ranges[name];\r\n            if (!localRange) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = localRange.from;\r\n            range.to = localRange.to;\r\n            serializationRanges.push(range);\r\n        }\r\n        return serializationRanges;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param _force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(_force?: boolean): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this._nodeDataStorage._isDisposed = true;\r\n\r\n        if (!doNotRecurse) {\r\n            const nodes = this.getDescendants(true);\r\n            for (const node of nodes) {\r\n                node.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            this._removeFromSceneRootNodes();\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n\r\n        this.onEnabledStateChangedObservable.clear();\r\n        this.onClonedObservable.clear();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n\r\n        this._behaviors.length = 0;\r\n\r\n        this.metadata = null;\r\n    }\r\n\r\n    /**\r\n     * Parse animation range data from a serialization object and store them into a given node\r\n     * @param node defines where to store the animation ranges\r\n     * @param parsedNode defines the serialization object to read data from\r\n     * @param _scene defines the hosting scene\r\n     */\r\n    public static ParseAnimationRanges(node: Node, parsedNode: any, _scene: Scene): void {\r\n        if (parsedNode.ranges) {\r\n            for (let index = 0; index < parsedNode.ranges.length; index++) {\r\n                const data = parsedNode.ranges[index];\r\n                node.createAnimationRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Return the minimum and maximum world vectors of the entire hierarchy under current node\r\n     * @param includeDescendants Include bounding info from descendants as well (true by default)\r\n     * @param predicate defines a callback function that can be customize to filter what meshes should be included in the list used to compute the bounding vectors\r\n     * @returns the new bounding vectors\r\n     */\r\n    public getHierarchyBoundingVectors(includeDescendants = true, predicate: Nullable<(abstractMesh: AbstractMesh) => boolean> = null): { min: Vector3; max: Vector3 } {\r\n        // Ensures that all world matrix will be recomputed.\r\n        this.getScene().incrementRenderId();\r\n\r\n        this.computeWorldMatrix(true);\r\n\r\n        let min: Vector3;\r\n        let max: Vector3;\r\n\r\n        const thisAbstractMesh = this as Node as AbstractMesh;\r\n        if (thisAbstractMesh.getBoundingInfo && thisAbstractMesh.subMeshes) {\r\n            // If this is an abstract mesh get its bounding info\r\n            const boundingInfo = thisAbstractMesh.getBoundingInfo();\r\n            min = boundingInfo.boundingBox.minimumWorld.clone();\r\n            max = boundingInfo.boundingBox.maximumWorld.clone();\r\n        } else {\r\n            min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n            max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            const descendants = this.getDescendants(false);\r\n\r\n            for (const descendant of descendants) {\r\n                const childMesh = <AbstractMesh>descendant;\r\n                childMesh.computeWorldMatrix(true);\r\n\r\n                // Filters meshes based on custom predicate function.\r\n                if (predicate && !predicate(childMesh)) {\r\n                    continue;\r\n                }\r\n\r\n                //make sure we have the needed params to get mix and max\r\n                if (!childMesh.getBoundingInfo || childMesh.getTotalVertices() === 0) {\r\n                    continue;\r\n                }\r\n\r\n                const childBoundingInfo = childMesh.getBoundingInfo();\r\n                const boundingBox = childBoundingInfo.boundingBox;\r\n\r\n                const minBox = boundingBox.minimumWorld;\r\n                const maxBox = boundingBox.maximumWorld;\r\n\r\n                Vector3.CheckExtends(minBox, min, max);\r\n                Vector3.CheckExtends(maxBox, min, max);\r\n            }\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max,\r\n        };\r\n    }\r\n}\r\n", "import type { IEasingFunction, EasingFunction } from \"./easing\";\r\nimport { Vector3, Quaternion, Vector2, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Hermite, Lerp } from \"../Maths/math.scalar.functions\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\nimport { AnimationKeyInterpolation } from \"./animationKey\";\r\nimport { AnimationRange } from \"./animationRange\";\r\nimport type { AnimationEvent } from \"./animationEvent\";\r\nimport { Node } from \"../node\";\r\nimport type { IAnimatable } from \"./animatable.interface\";\r\nimport { Size } from \"../Maths/math.size\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Animatable } from \"./animatable\";\r\nimport type { RuntimeAnimation } from \"./runtimeAnimation\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n// Static values to help the garbage collector\r\n\r\n// Quaternion\r\nexport const _staticOffsetValueQuaternion: DeepImmutable<Quaternion> = Object.freeze(new Quaternion(0, 0, 0, 0));\r\n\r\n// Vector3\r\nexport const _staticOffsetValueVector3: DeepImmutable<Vector3> = Object.freeze(Vector3.Zero());\r\n\r\n// Vector2\r\nexport const _staticOffsetValueVector2: DeepImmutable<Vector2> = Object.freeze(Vector2.Zero());\r\n\r\n// Size\r\nexport const _staticOffsetValueSize: DeepImmutable<Size> = Object.freeze(Size.Zero());\r\n\r\n// Color3\r\nexport const _staticOffsetValueColor3: DeepImmutable<Color3> = Object.freeze(Color3.Black());\r\n\r\n// Color4\r\nexport const _staticOffsetValueColor4: DeepImmutable<Color4> = Object.freeze(new Color4(0, 0, 0, 0));\r\n\r\n/**\r\n * Options to be used when creating an additive animation\r\n */\r\nexport interface IMakeAnimationAdditiveOptions {\r\n    /**\r\n     * The frame that the animation should be relative to (if not provided, 0 will be used)\r\n     */\r\n    referenceFrame?: number;\r\n    /**\r\n     * The name of the animation range to convert to additive. If not provided, fromFrame / toFrame will be used\r\n     * If fromFrame / toFrame are not provided either, the whole animation will be converted to additive\r\n     */\r\n    range?: string;\r\n    /**\r\n     * If true, the original animation will be cloned and converted to additive. If false, the original animation will be converted to additive (default is false)\r\n     */\r\n    cloneOriginalAnimation?: boolean;\r\n    /**\r\n     * The name of the cloned animation if cloneOriginalAnimation is true. If not provided, use the original animation name\r\n     */\r\n    clonedAnimationName?: string;\r\n    /**\r\n     * Together with toFrame, defines the range of the animation to convert to additive. Will only be used if range is not provided\r\n     * If range and fromFrame / toFrame are not provided, the whole animation will be converted to additive\r\n     */\r\n    fromFrame?: number;\r\n    /**\r\n     * Together with fromFrame, defines the range of the animation to convert to additive.\r\n     */\r\n    toFrame?: number;\r\n    /**\r\n     * If true, the key frames will be clipped to the range specified by range or fromFrame / toFrame (default is false)\r\n     */\r\n    clipKeys?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationState {\r\n    key: number;\r\n    repeatCount: number;\r\n    workValue?: any;\r\n    loopMode?: number;\r\n    offsetValue?: any;\r\n    highLimitValue?: any;\r\n}\r\n\r\nconst evaluateAnimationState: _IAnimationState = {\r\n    key: 0,\r\n    repeatCount: 0,\r\n    loopMode: 2 /*Animation.ANIMATIONLOOPMODE_CONSTANT*/,\r\n};\r\n\r\n/**\r\n * Class used to store any kind of animation\r\n */\r\nexport class Animation {\r\n    private static _UniqueIdGenerator = 0;\r\n\r\n    /**\r\n     * Use matrix interpolation instead of using direct key value when animating matrices\r\n     */\r\n    public static AllowMatricesInterpolation = false;\r\n\r\n    /**\r\n     * When matrix interpolation is enabled, this boolean forces the system to use Matrix.DecomposeLerp instead of Matrix.Lerp. Interpolation is more precise but slower\r\n     */\r\n    public static AllowMatrixDecomposeForInterpolation = true;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the animation (the uniqueness is solely among other animations)\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the animation was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Stores the key frames of the animation\r\n     */\r\n    private _keys: Array<IAnimationKey>;\r\n\r\n    /**\r\n     * Stores the easing function of the animation\r\n     */\r\n    private _easingFunction: Nullable<IEasingFunction> = null;\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _runtimeAnimations = new Array<RuntimeAnimation>();\r\n\r\n    /**\r\n     * The set of event that will be linked to this animation\r\n     */\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * Stores an array of target property paths\r\n     */\r\n    public targetPropertyPath: string[];\r\n\r\n    /**\r\n     * Stores the blending speed of the animation\r\n     */\r\n    public blendingSpeed = 0.01;\r\n\r\n    /**\r\n     * Stores the animation ranges for the animation\r\n     */\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * @internal Internal use\r\n     */\r\n    public static _PrepareAnimation(\r\n        name: string,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction\r\n    ): Nullable<Animation> {\r\n        let dataType = undefined;\r\n\r\n        if (!isNaN(parseFloat(from)) && isFinite(from)) {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (from instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else if (from instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (from instanceof Vector2) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR2;\r\n        } else if (from instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (from instanceof Color4) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR4;\r\n        } else if (from instanceof Size) {\r\n            dataType = Animation.ANIMATIONTYPE_SIZE;\r\n        }\r\n\r\n        if (dataType == undefined) {\r\n            return null;\r\n        }\r\n\r\n        const animation = new Animation(name, targetProperty, framePerSecond, dataType, loopMode);\r\n\r\n        const keys: Array<IAnimationKey> = [\r\n            { frame: 0, value: from },\r\n            { frame: totalFrame, value: to },\r\n        ];\r\n        animation.setKeys(keys);\r\n\r\n        if (easingFunction !== undefined) {\r\n            animation.setEasingFunction(easingFunction);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Sets up an animation\r\n     * @param property The property to animate\r\n     * @param animationType The animation type to apply\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param easingFunction The easing function used in the animation\r\n     * @returns The created animation\r\n     */\r\n    public static CreateAnimation(property: string, animationType: number, framePerSecond: number, easingFunction: EasingFunction): Animation {\r\n        const animation: Animation = new Animation(property + \"Animation\", property, framePerSecond, animationType, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setEasingFunction(easingFunction);\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param target defines the target where the animation will take place\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second yo use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when animation end\r\n     * @param scene defines the hosting scene\r\n     * @returns the animatable created for this animation\r\n     */\r\n    public static CreateAndStartAnimation(\r\n        name: string,\r\n        target: any,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void,\r\n        scene?: Scene\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        if (target.getScene) {\r\n            scene = target.getScene();\r\n        }\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        return scene.beginDirectAnimation(target, [animation], 0, totalFrame, animation.loopMode !== Animation.ANIMATIONLOOPMODE_CONSTANT, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node and its descendants\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param node defines the root node where the animation will take place\r\n     * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second to use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n     * @returns the list of animatables created for all nodes\r\n     * @example https://www.babylonjs-playground.com/#MH0VLI\r\n     */\r\n    public static CreateAndStartHierarchyAnimation(\r\n        name: string,\r\n        node: Node,\r\n        directDescendantsOnly: boolean,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable[]> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        const scene = node.getScene();\r\n        return scene.beginDirectHierarchyAnimation(node, directDescendantsOnly, [animation], 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, merges it with the existing animations and starts it\r\n     * @param name Name of the animation\r\n     * @param node Node which contains the scene that begins the animations\r\n     * @param targetProperty Specifies which property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param totalFrame The total number of frames\r\n     * @param from The frame at the beginning of the animation\r\n     * @param to The frame at the end of the animation\r\n     * @param loopMode Specifies the loop mode of the animation\r\n     * @param easingFunction (Optional) The easing function of the animation, which allow custom mathematical formulas for animations\r\n     * @param onAnimationEnd Callback to run once the animation is complete\r\n     * @returns Nullable animation\r\n     */\r\n    public static CreateMergeAndStartAnimation(\r\n        name: string,\r\n        node: Node,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        node.animations.push(animation);\r\n\r\n        return node.getScene().beginAnimation(node, 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes of an animation to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to (default: 0)\r\n     * @param range defines the name of the AnimationRange belonging to the Animation to convert\r\n     * @param cloneOriginal defines whether or not to clone the animation and convert the clone or convert the original animation (default is false)\r\n     * @param clonedName defines the name of the resulting cloned Animation if cloneOriginal is true\r\n     * @returns a new Animation if cloneOriginal is true or the original Animation if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, referenceFrame?: number, range?: string, cloneOriginal?: boolean, clonedName?: string): Animation;\r\n\r\n    /**\r\n     * Convert the keyframes of an animation to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param options defines the options to use when converting ey keyframes\r\n     * @returns a new Animation if options.cloneOriginalAnimation is true or the original Animation if options.cloneOriginalAnimation is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, options?: IMakeAnimationAdditiveOptions): Animation;\r\n\r\n    /** @internal */\r\n    public static MakeAnimationAdditive(\r\n        sourceAnimation: Animation,\r\n        referenceFrameOrOptions?: number | IMakeAnimationAdditiveOptions,\r\n        range?: string,\r\n        cloneOriginal = false,\r\n        clonedName?: string\r\n    ): Animation {\r\n        let options: IMakeAnimationAdditiveOptions;\r\n\r\n        if (typeof referenceFrameOrOptions === \"object\") {\r\n            options = referenceFrameOrOptions;\r\n        } else {\r\n            options = {\r\n                referenceFrame: referenceFrameOrOptions ?? 0,\r\n                range: range,\r\n                cloneOriginalAnimation: cloneOriginal,\r\n                clonedAnimationName: clonedName,\r\n            };\r\n        }\r\n\r\n        let animation = sourceAnimation;\r\n\r\n        if (options.cloneOriginalAnimation) {\r\n            animation = sourceAnimation.clone();\r\n            animation.name = options.clonedAnimationName || animation.name;\r\n        }\r\n\r\n        if (!animation._keys.length) {\r\n            return animation;\r\n        }\r\n\r\n        const referenceFrame = options.referenceFrame && options.referenceFrame >= 0 ? options.referenceFrame : 0;\r\n        let startIndex = 0;\r\n        const firstKey = animation._keys[0];\r\n        let endIndex = animation._keys.length - 1;\r\n        const lastKey = animation._keys[endIndex];\r\n        const valueStore = {\r\n            referenceValue: firstKey.value,\r\n            referencePosition: TmpVectors.Vector3[0],\r\n            referenceQuaternion: TmpVectors.Quaternion[0],\r\n            referenceScaling: TmpVectors.Vector3[1],\r\n            keyPosition: TmpVectors.Vector3[2],\r\n            keyQuaternion: TmpVectors.Quaternion[1],\r\n            keyScaling: TmpVectors.Vector3[3],\r\n        };\r\n        let from = firstKey.frame;\r\n        let to = lastKey.frame;\r\n        if (options.range) {\r\n            const rangeValue = animation.getRange(options.range);\r\n\r\n            if (rangeValue) {\r\n                from = rangeValue.from;\r\n                to = rangeValue.to;\r\n            }\r\n        } else {\r\n            from = options.fromFrame ?? from;\r\n            to = options.toFrame ?? to;\r\n        }\r\n\r\n        if (from !== firstKey.frame) {\r\n            startIndex = animation.createKeyForFrame(from);\r\n        }\r\n\r\n        if (to !== lastKey.frame) {\r\n            endIndex = animation.createKeyForFrame(to);\r\n        }\r\n\r\n        // There's only one key, so use it\r\n        if (animation._keys.length === 1) {\r\n            const value = animation._getKeyValue(animation._keys[0]);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Reference frame is before the first frame, so just use the first frame\r\n        else if (referenceFrame <= firstKey.frame) {\r\n            const value = animation._getKeyValue(firstKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Reference frame is after the last frame, so just use the last frame\r\n        else if (referenceFrame >= lastKey.frame) {\r\n            const value = animation._getKeyValue(lastKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Interpolate the reference value from the animation\r\n        else {\r\n            evaluateAnimationState.key = 0;\r\n            const value = animation._interpolate(referenceFrame, evaluateAnimationState);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Conjugate the quaternion\r\n        if (animation.dataType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            valueStore.referenceValue.normalize().conjugateInPlace();\r\n        }\r\n\r\n        // Decompose matrix and conjugate the quaternion\r\n        else if (animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\r\n            valueStore.referenceValue.decompose(valueStore.referenceScaling, valueStore.referenceQuaternion, valueStore.referencePosition);\r\n            valueStore.referenceQuaternion.normalize().conjugateInPlace();\r\n        }\r\n\r\n        let startFrame = Number.MAX_VALUE;\r\n        const clippedKeys: Nullable<IAnimationKey[]> = options.clipKeys ? [] : null;\r\n\r\n        // Subtract the reference value from all of the key values\r\n        for (let index = startIndex; index <= endIndex; index++) {\r\n            let key = animation._keys[index];\r\n\r\n            if (clippedKeys || options.cloneOriginalAnimation) {\r\n                key = {\r\n                    frame: key.frame,\r\n                    value: key.value.clone ? key.value.clone() : key.value,\r\n                    inTangent: key.inTangent,\r\n                    outTangent: key.outTangent,\r\n                    interpolation: key.interpolation,\r\n                    lockedTangent: key.lockedTangent,\r\n                };\r\n                if (clippedKeys) {\r\n                    if (startFrame === Number.MAX_VALUE) {\r\n                        startFrame = key.frame;\r\n                    }\r\n                    key.frame -= startFrame;\r\n                    clippedKeys.push(key);\r\n                }\r\n            }\r\n\r\n            // If this key was duplicated to create a frame 0 key, skip it because its value has already been updated\r\n            if (index && animation.dataType !== Animation.ANIMATIONTYPE_FLOAT && key.value === firstKey.value) {\r\n                continue;\r\n            }\r\n\r\n            switch (animation.dataType) {\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    key.value.decompose(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition);\r\n                    valueStore.keyPosition.subtractInPlace(valueStore.referencePosition);\r\n                    valueStore.keyScaling.divideInPlace(valueStore.referenceScaling);\r\n                    valueStore.referenceQuaternion.multiplyToRef(valueStore.keyQuaternion, valueStore.keyQuaternion);\r\n                    Matrix.ComposeToRef(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    valueStore.referenceValue.multiplyToRef(key.value, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_VECTOR2:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.value.subtractToRef(valueStore.referenceValue, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_SIZE:\r\n                    key.value.width -= valueStore.referenceValue.width;\r\n                    key.value.height -= valueStore.referenceValue.height;\r\n                    break;\r\n\r\n                default:\r\n                    key.value -= valueStore.referenceValue;\r\n            }\r\n        }\r\n\r\n        if (clippedKeys) {\r\n            animation.setKeys(clippedKeys, true);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Transition property of an host to the target Value\r\n     * @param property The property to transition\r\n     * @param targetValue The target Value of the property\r\n     * @param host The object where the property to animate belongs\r\n     * @param scene Scene used to run the animation\r\n     * @param frameRate Framerate (in frame/s) to use\r\n     * @param transition The transition type we want to use\r\n     * @param duration The duration of the animation, in milliseconds\r\n     * @param onAnimationEnd Callback trigger at the end of the animation\r\n     * @returns Nullable animation\r\n     */\r\n    public static TransitionTo(\r\n        property: string,\r\n        targetValue: any,\r\n        host: any,\r\n        scene: Scene,\r\n        frameRate: number,\r\n        transition: Animation,\r\n        duration: number,\r\n        onAnimationEnd: Nullable<() => void> = null\r\n    ): Nullable<Animatable> {\r\n        if (duration <= 0) {\r\n            host[property] = targetValue;\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const endFrame: number = frameRate * (duration / 1000);\r\n\r\n        transition.setKeys([\r\n            {\r\n                frame: 0,\r\n                value: host[property].clone ? host[property].clone() : host[property],\r\n            },\r\n            {\r\n                frame: endFrame,\r\n                value: targetValue,\r\n            },\r\n        ]);\r\n\r\n        if (!host.animations) {\r\n            host.animations = [];\r\n        }\r\n\r\n        host.animations.push(transition);\r\n\r\n        const animation: Animatable = scene.beginAnimation(host, 0, endFrame, false);\r\n        animation.onAnimationEnd = onAnimationEnd;\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Return the array of runtime animations currently using this animation\r\n     */\r\n    public get runtimeAnimations(): RuntimeAnimation[] {\r\n        return this._runtimeAnimations;\r\n    }\r\n\r\n    /**\r\n     * Specifies if any of the runtime animations are currently running\r\n     */\r\n    public get hasRunningRuntimeAnimations(): boolean {\r\n        for (const runtimeAnimation of this._runtimeAnimations) {\r\n            if (!runtimeAnimation.isStopped()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the animation\r\n     * @param name Name of the animation\r\n     * @param targetProperty Property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param dataType The data type of the animation\r\n     * @param loopMode The loop mode of the animation\r\n     * @param enableBlending Specifies if blending should be enabled\r\n     */\r\n    constructor(\r\n        /**Name of the animation */\r\n        public name: string,\r\n        /**Property to animate */\r\n        public targetProperty: string,\r\n        /**The frames per second of the animation */\r\n        public framePerSecond: number,\r\n        /**The data type of the animation */\r\n        public dataType: number,\r\n        /**The loop mode of the animation */\r\n        public loopMode?: number,\r\n        /**Specifies if blending should be enabled */\r\n        public enableBlending?: boolean\r\n    ) {\r\n        this.targetPropertyPath = targetProperty.split(\".\");\r\n        this.dataType = dataType;\r\n        this.loopMode = loopMode === undefined ? Animation.ANIMATIONLOOPMODE_CYCLE : loopMode;\r\n        this.uniqueId = Animation._UniqueIdGenerator++;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Converts the animation to a string\r\n     * @param fullDetails support for multiple levels of logging within scene loading\r\n     * @returns String form of the animation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", property: \" + this.targetProperty;\r\n        ret += \", datatype: \" + [\"Float\", \"Vector3\", \"Quaternion\", \"Matrix\", \"Color3\", \"Vector2\"][this.dataType];\r\n        ret += \", nKeys: \" + (this._keys ? this._keys.length : \"none\");\r\n        ret += \", nRanges: \" + (this._ranges ? Object.keys(this._ranges).length : \"none\");\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            let first = true;\r\n            for (const name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Add an event to this animation\r\n     * @param event Event to add\r\n     */\r\n    public addEvent(event: AnimationEvent): void {\r\n        this._events.push(event);\r\n        this._events.sort((a, b) => a.frame - b.frame);\r\n    }\r\n\r\n    /**\r\n     * Remove all events found at the given frame\r\n     * @param frame The frame to remove events from\r\n     */\r\n    public removeEvents(frame: number): void {\r\n        for (let index = 0; index < this._events.length; index++) {\r\n            if (this._events[index].frame === frame) {\r\n                this._events.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all the events from the animation\r\n     * @returns Events from the animation\r\n     */\r\n    public getEvents(): AnimationEvent[] {\r\n        return this._events;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range\r\n     * @param name Name of the animation range\r\n     * @param from Starting frame of the animation range\r\n     * @param to Ending frame of the animation\r\n     */\r\n    public createRange(name: string, from: number, to: number): void {\r\n        // check name not already in use; could happen for bones after serialized\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes an animation range by name\r\n     * @param name Name of the animation range to delete\r\n     * @param deleteFrames Specifies if the key frames for the range should also be deleted (true) or not (false)\r\n     */\r\n    public deleteRange(name: string, deleteFrames = true): void {\r\n        const range = this._ranges[name];\r\n        if (!range) {\r\n            return;\r\n        }\r\n        if (deleteFrames) {\r\n            const from = range.from;\r\n            const to = range.to;\r\n\r\n            // this loop MUST go high to low for multiple splices to work\r\n            for (let key = this._keys.length - 1; key >= 0; key--) {\r\n                if (this._keys[key].frame >= from && this._keys[key].frame <= to) {\r\n                    this._keys.splice(key, 1);\r\n                }\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Gets the animation range by name, or null if not defined\r\n     * @param name Name of the animation range\r\n     * @returns Nullable animation range\r\n     */\r\n    public getRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name];\r\n    }\r\n\r\n    /**\r\n     * Gets the key frames from the animation\r\n     * @returns The key frames of the animation\r\n     */\r\n    public getKeys(): Array<IAnimationKey> {\r\n        return this._keys;\r\n    }\r\n\r\n    /**\r\n     * Gets the highest frame of the animation\r\n     * @returns Highest frame of the animation\r\n     */\r\n    public getHighestFrame(): number {\r\n        let ret = 0;\r\n\r\n        for (let key = 0, nKeys = this._keys.length; key < nKeys; key++) {\r\n            if (ret < this._keys[key].frame) {\r\n                ret = this._keys[key].frame;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the easing function of the animation\r\n     * @returns Easing function of the animation\r\n     */\r\n    public getEasingFunction(): Nullable<IEasingFunction> {\r\n        return this._easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Sets the easing function of the animation\r\n     * @param easingFunction A custom mathematical formula for animation\r\n     */\r\n    public setEasingFunction(easingFunction: Nullable<IEasingFunction>): void {\r\n        this._easingFunction = easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunction(startValue: number, endValue: number, gradient: number): number {\r\n        return Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunctionWithTangents(startValue: number, outTangent: number, endValue: number, inTangent: number, gradient: number): number {\r\n        return Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion using a spherical linear interpolation\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Slerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunctionWithTangents(startValue: Quaternion, outTangent: Quaternion, endValue: Quaternion, inTangent: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Hermite(startValue, outTangent, endValue, inTangent, gradient).normalize();\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns InterpolatedVector3 value\r\n     */\r\n    public vector3InterpolateFunctionWithTangents(startValue: Vector3, outTangent: Vector3, endValue: Vector3, inTangent: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunctionWithTangents(startValue: Vector2, outTangent: Vector2, endValue: Vector2, inTangent: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a size linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Size value\r\n     */\r\n    public sizeInterpolateFunction(startValue: Size, endValue: Size, gradient: number): Size {\r\n        return Size.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: number): Color3 {\r\n        return Color3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color3InterpolateFunctionWithTangents(startValue: Color3, outTangent: Color3, endValue: Color3, inTangent: Color3, gradient: number): Color3 {\r\n        return Color3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color4InterpolateFunction(startValue: Color4, endValue: Color4, gradient: number): Color4 {\r\n        return Color4.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color4InterpolateFunctionWithTangents(startValue: Color4, outTangent: Color4, endValue: Color4, inTangent: Color4, gradient: number): Color4 {\r\n        return Color4.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _getKeyValue(value: any): any {\r\n        if (typeof value === \"function\") {\r\n            return value();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Evaluate the animation value at a given frame\r\n     * @param currentFrame defines the frame where we want to evaluate the animation\r\n     * @returns the animation value\r\n     */\r\n    public evaluate(currentFrame: number) {\r\n        evaluateAnimationState.key = 0;\r\n        return this._interpolate(currentFrame, evaluateAnimationState);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _interpolate(currentFrame: number, state: _IAnimationState, searchClosestKeyOnly = false): any {\r\n        if (state.loopMode === Animation.ANIMATIONLOOPMODE_CONSTANT && state.repeatCount > 0) {\r\n            return state.highLimitValue.clone ? state.highLimitValue.clone() : state.highLimitValue;\r\n        }\r\n\r\n        const keys = this._keys;\r\n        const keysLength = keys.length;\r\n\r\n        let key = state.key;\r\n\r\n        while (key >= 0 && currentFrame < keys[key].frame) {\r\n            --key;\r\n        }\r\n\r\n        while (key + 1 <= keysLength - 1 && currentFrame >= keys[key + 1].frame) {\r\n            ++key;\r\n        }\r\n\r\n        state.key = key;\r\n\r\n        if (key < 0) {\r\n            return searchClosestKeyOnly ? undefined : this._getKeyValue(keys[0].value);\r\n        } else if (key + 1 > keysLength - 1) {\r\n            return searchClosestKeyOnly ? undefined : this._getKeyValue(keys[keysLength - 1].value);\r\n        }\r\n\r\n        const startKey = keys[key];\r\n        const endKey = keys[key + 1];\r\n\r\n        if (searchClosestKeyOnly && (currentFrame === startKey.frame || currentFrame === endKey.frame)) {\r\n            return undefined;\r\n        }\r\n\r\n        const startValue = this._getKeyValue(startKey.value);\r\n        const endValue = this._getKeyValue(endKey.value);\r\n        if (startKey.interpolation === AnimationKeyInterpolation.STEP) {\r\n            if (endKey.frame > currentFrame) {\r\n                return startValue;\r\n            } else {\r\n                return endValue;\r\n            }\r\n        }\r\n\r\n        const useTangent = startKey.outTangent !== undefined && endKey.inTangent !== undefined;\r\n        const frameDelta = endKey.frame - startKey.frame;\r\n\r\n        // gradient : percent of currentFrame between the frame inf and the frame sup\r\n        let gradient = (currentFrame - startKey.frame) / frameDelta;\r\n\r\n        // check for easingFunction and correction of gradient\r\n        const easingFunction = startKey.easingFunction || this.getEasingFunction();\r\n        // can also be undefined, if not provided\r\n        if (easingFunction) {\r\n            gradient = easingFunction.ease(gradient);\r\n        }\r\n\r\n        switch (this.dataType) {\r\n            // Float\r\n            case Animation.ANIMATIONTYPE_FLOAT: {\r\n                const floatValue = useTangent\r\n                    ? this.floatInterpolateFunctionWithTangents(startValue, startKey.outTangent * frameDelta, endValue, endKey.inTangent * frameDelta, gradient)\r\n                    : this.floatInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return floatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return (state.offsetValue ?? 0) * state.repeatCount + floatValue;\r\n                }\r\n                break;\r\n            }\r\n            // Quaternion\r\n            case Animation.ANIMATIONTYPE_QUATERNION: {\r\n                const quatValue = useTangent\r\n                    ? this.quaternionInterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.quaternionInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return quatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return quatValue.addInPlace((state.offsetValue || _staticOffsetValueQuaternion).scale(state.repeatCount));\r\n                }\r\n\r\n                return quatValue;\r\n            }\r\n            // Vector3\r\n            case Animation.ANIMATIONTYPE_VECTOR3: {\r\n                const vec3Value = useTangent\r\n                    ? this.vector3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return vec3Value.add((state.offsetValue || _staticOffsetValueVector3).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Vector2\r\n            case Animation.ANIMATIONTYPE_VECTOR2: {\r\n                const vec2Value = useTangent\r\n                    ? this.vector2InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector2InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec2Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return vec2Value.add((state.offsetValue || _staticOffsetValueVector2).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Size\r\n            case Animation.ANIMATIONTYPE_SIZE: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient);\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient).add((state.offsetValue || _staticOffsetValueSize).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color3\r\n            case Animation.ANIMATIONTYPE_COLOR3: {\r\n                const color3Value = useTangent\r\n                    ? this.color3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return color3Value.add((state.offsetValue || _staticOffsetValueColor3).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color4\r\n            case Animation.ANIMATIONTYPE_COLOR4: {\r\n                const color4Value = useTangent\r\n                    ? this.color4InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color4InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color4Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return color4Value.add((state.offsetValue || _staticOffsetValueColor4).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Matrix\r\n            case Animation.ANIMATIONTYPE_MATRIX: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO: {\r\n                        if (Animation.AllowMatricesInterpolation) {\r\n                            return this.matrixInterpolateFunction(startValue, endValue, gradient, state.workValue);\r\n                        }\r\n                        return startValue;\r\n                    }\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT: {\r\n                        return startValue;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Defines the function to use to interpolate matrices\r\n     * @param startValue defines the start matrix\r\n     * @param endValue defines the end matrix\r\n     * @param gradient defines the gradient between both matrices\r\n     * @param result defines an optional target matrix where to store the interpolation\r\n     * @returns the interpolated matrix\r\n     */\r\n    public matrixInterpolateFunction(startValue: Matrix, endValue: Matrix, gradient: number, result?: Matrix): Matrix {\r\n        if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n            if (result) {\r\n                Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n                return result;\r\n            }\r\n            return Matrix.DecomposeLerp(startValue, endValue, gradient);\r\n        }\r\n\r\n        if (result) {\r\n            Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n            return result;\r\n        }\r\n        return Matrix.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of the animation\r\n     * @returns Cloned animation\r\n     */\r\n    public clone(): Animation {\r\n        const clone = new Animation(this.name, this.targetPropertyPath.join(\".\"), this.framePerSecond, this.dataType, this.loopMode);\r\n\r\n        clone.enableBlending = this.enableBlending;\r\n        clone.blendingSpeed = this.blendingSpeed;\r\n\r\n        if (this._keys) {\r\n            clone.setKeys(this._keys);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            clone._ranges = {};\r\n            for (const name in this._ranges) {\r\n                const range = this._ranges[name];\r\n                if (!range) {\r\n                    continue;\r\n                }\r\n                clone._ranges[name] = range.clone();\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Sets the key frames of the animation\r\n     * @param values The animation key frames to set\r\n     * @param dontClone Whether to clone the keys or not (default is false, so the array of keys is cloned)\r\n     */\r\n    public setKeys(values: Array<IAnimationKey>, dontClone = false): void {\r\n        this._keys = !dontClone ? values.slice(0) : values;\r\n    }\r\n\r\n    /**\r\n     * Creates a key for the frame passed as a parameter and adds it to the animation IF a key doesn't already exist for that frame\r\n     * @param frame Frame number\r\n     * @returns The key index if the key was added or the index of the pre existing key if the frame passed as parameter already has a corresponding key\r\n     */\r\n    public createKeyForFrame(frame: number) {\r\n        // Find the key corresponding to frame\r\n        evaluateAnimationState.key = 0;\r\n        const value = this._interpolate(frame, evaluateAnimationState, true);\r\n\r\n        if (!value) {\r\n            // A key corresponding to this frame already exists\r\n            return this._keys[evaluateAnimationState.key].frame === frame ? evaluateAnimationState.key : evaluateAnimationState.key + 1;\r\n        }\r\n\r\n        // The frame is between two keys, so create a new key\r\n        const newKey: IAnimationKey = {\r\n            frame,\r\n            value: value.clone ? value.clone() : value,\r\n        };\r\n\r\n        this._keys.splice(evaluateAnimationState.key + 1, 0, newKey);\r\n\r\n        return evaluateAnimationState.key + 1;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animation to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.property = this.targetProperty;\r\n        serializationObject.framePerSecond = this.framePerSecond;\r\n        serializationObject.dataType = this.dataType;\r\n        serializationObject.loopBehavior = this.loopMode;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        const dataType = this.dataType;\r\n        serializationObject.keys = [];\r\n        const keys = this.getKeys();\r\n        for (let index = 0; index < keys.length; index++) {\r\n            const animationKey = keys[index];\r\n\r\n            const key: any = {};\r\n            key.frame = animationKey.frame;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    key.values = [animationKey.value];\r\n                    if (animationKey.inTangent !== undefined) {\r\n                        key.values.push(animationKey.inTangent);\r\n                    }\r\n                    if (animationKey.outTangent !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent);\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.values = animationKey.value.asArray();\r\n                    if (animationKey.inTangent != undefined) {\r\n                        key.values.push(animationKey.inTangent.asArray());\r\n                    }\r\n                    if (animationKey.outTangent != undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent.asArray());\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            serializationObject.keys.push(key);\r\n        }\r\n\r\n        serializationObject.ranges = [];\r\n        for (const name in this._ranges) {\r\n            const source = this._ranges[name];\r\n\r\n            if (!source) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = source.from;\r\n            range.to = source.to;\r\n            serializationObject.ranges.push(range);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Float animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_FLOAT = Constants.ANIMATIONTYPE_FLOAT;\r\n    /**\r\n     * Vector3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR3 = Constants.ANIMATIONTYPE_VECTOR3;\r\n    /**\r\n     * Quaternion animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_QUATERNION = Constants.ANIMATIONTYPE_QUATERNION;\r\n    /**\r\n     * Matrix animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_MATRIX = Constants.ANIMATIONTYPE_MATRIX;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR3 = Constants.ANIMATIONTYPE_COLOR3;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR4 = Constants.ANIMATIONTYPE_COLOR4;\r\n    /**\r\n     * Vector2 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR2 = Constants.ANIMATIONTYPE_VECTOR2;\r\n    /**\r\n     * Size animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_SIZE = Constants.ANIMATIONTYPE_SIZE;\r\n    /**\r\n     * Relative Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE = 0;\r\n    /**\r\n     * Cycle Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CYCLE = 1;\r\n    /**\r\n     * Constant Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CONSTANT = 2;\r\n    /**\r\n     * Yoyo Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_YOYO = 4;\r\n    /**\r\n     * Relative Loop Mode (add to current value of animated object, unlike ANIMATIONLOOPMODE_RELATIVE)\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT = 5;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _UniversalLerp(left: any, right: any, amount: number): any {\r\n        const constructor = left.constructor;\r\n        if (constructor.Lerp) {\r\n            // Lerp supported\r\n            return constructor.Lerp(left, right, amount);\r\n        } else if (constructor.Slerp) {\r\n            // Slerp supported\r\n            return constructor.Slerp(left, right, amount);\r\n        } else if (left.toFixed) {\r\n            // Number\r\n            return left * (1.0 - amount) + amount * right;\r\n        } else {\r\n            // Blending not supported\r\n            return right;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses an animation object and creates an animation\r\n     * @param parsedAnimation Parsed animation object\r\n     * @returns Animation object\r\n     */\r\n    public static Parse(parsedAnimation: any): Animation {\r\n        const animation = new Animation(parsedAnimation.name, parsedAnimation.property, parsedAnimation.framePerSecond, parsedAnimation.dataType, parsedAnimation.loopBehavior);\r\n\r\n        const dataType = parsedAnimation.dataType;\r\n        const keys: Array<IAnimationKey> = [];\r\n        let data;\r\n        let index: number;\r\n\r\n        if (parsedAnimation.enableBlending) {\r\n            animation.enableBlending = parsedAnimation.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimation.blendingSpeed) {\r\n            animation.blendingSpeed = parsedAnimation.blendingSpeed;\r\n        }\r\n\r\n        for (index = 0; index < parsedAnimation.keys.length; index++) {\r\n            const key = parsedAnimation.keys[index];\r\n            let inTangent: any = undefined;\r\n            let outTangent: any = undefined;\r\n            let interpolation: any = undefined;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    data = key.values[0];\r\n                    if (key.values.length >= 2) {\r\n                        inTangent = key.values[1];\r\n                    }\r\n                    if (key.values.length >= 3) {\r\n                        outTangent = key.values[2];\r\n                    }\r\n                    if (key.values.length >= 4) {\r\n                        interpolation = key.values[3];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    data = Quaternion.FromArray(key.values);\r\n                    if (key.values.length >= 8) {\r\n                        const _inTangent = Quaternion.FromArray(key.values.slice(4, 8));\r\n                        if (!_inTangent.equals(Quaternion.Zero())) {\r\n                            inTangent = _inTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 12) {\r\n                        const _outTangent = Quaternion.FromArray(key.values.slice(8, 12));\r\n                        if (!_outTangent.equals(Quaternion.Zero())) {\r\n                            outTangent = _outTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 13) {\r\n                        interpolation = key.values[12];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    data = Matrix.FromArray(key.values);\r\n                    if (key.values.length >= 17) {\r\n                        interpolation = key.values[16];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    data = Color3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Color3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Color3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    data = Color4.FromArray(key.values);\r\n                    if (key.values[4]) {\r\n                        inTangent = Color4.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        outTangent = Color4.FromArray(key.values[5]);\r\n                    }\r\n                    if (key.values[6]) {\r\n                        interpolation = Color4.FromArray(key.values[6]);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                default:\r\n                    data = Vector3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Vector3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Vector3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            const keyData: any = {};\r\n            keyData.frame = key.frame;\r\n            keyData.value = data;\r\n\r\n            if (inTangent != undefined) {\r\n                keyData.inTangent = inTangent;\r\n            }\r\n            if (outTangent != undefined) {\r\n                keyData.outTangent = outTangent;\r\n            }\r\n            if (interpolation != undefined) {\r\n                keyData.interpolation = interpolation;\r\n            }\r\n            keys.push(keyData);\r\n        }\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (parsedAnimation.ranges) {\r\n            for (index = 0; index < parsedAnimation.ranges.length; index++) {\r\n                data = parsedAnimation.ranges[index];\r\n                animation.createRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        SerializationHelper.AppendSerializedAnimations(source, destination);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation or an array of animations from a snippet saved in a remote file\r\n     * @param name defines the name of the animation to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @returns a promise that will resolve to the new animation or an array of animations\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let serializationObject = JSON.parse(request.responseText);\r\n                        if (serializationObject.animations) {\r\n                            serializationObject = serializationObject.animations;\r\n                        }\r\n\r\n                        if (serializationObject.length) {\r\n                            const output: Animation[] = [];\r\n                            for (const serializedAnimation of serializationObject) {\r\n                                output.push(this.Parse(serializedAnimation));\r\n                            }\r\n\r\n                            resolve(output);\r\n                        } else {\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            if (name) {\r\n                                output.name = name;\r\n                            }\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the animation\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static ParseFromSnippetAsync(snippetId: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n\r\n                        if (snippet.animations) {\r\n                            const serializationObject = JSON.parse(snippet.animations);\r\n                            const outputs: Animation[] = [];\r\n                            for (const serializedAnimation of serializationObject.animations) {\r\n                                const output = this.Parse(serializedAnimation);\r\n                                output.snippetId = snippetId;\r\n                                outputs.push(output);\r\n                            }\r\n\r\n                            resolve(outputs);\r\n                        } else {\r\n                            const serializationObject = JSON.parse(snippet.animation);\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            output.snippetId = snippetId;\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static CreateFromSnippetAsync = Animation.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.Animation\", Animation);\r\nNode._AnimationRangeFactory = (name: string, from: number, to: number) => new AnimationRange(name, from, to);\r\n"],
  "mappings": "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",
  "names": []
}
