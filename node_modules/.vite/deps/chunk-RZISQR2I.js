import {
  init_instancesDeclaration
} from "./chunk-MKBKOF6C.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-U73FLLBC.js";
import {
  init_instancesVertex
} from "./chunk-GSF5L374.js";
import {
  init_bonesDeclaration
} from "./chunk-MXPRHMVQ.js";
import {
  init_morphTargetsVertexGlobalDeclaration
} from "./chunk-27KEXXJI.js";
import {
  init_morphTargetsVertexDeclaration
} from "./chunk-S4MQZ7UI.js";
import {
  init_morphTargetsVertexGlobal
} from "./chunk-RR2HNGYR.js";
import {
  init_morphTargetsVertex
} from "./chunk-YRZHJLJ6.js";
import {
  init_bonesVertex
} from "./chunk-XX4LGSX3.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/ShadersWGSL/meshUVSpaceRenderer.vertex.js
var name, shader, meshUVSpaceRendererVertexShaderWGSL;
var init_meshUVSpaceRenderer_vertex = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/meshUVSpaceRenderer.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_morphTargetsVertexGlobalDeclaration();
    init_morphTargetsVertexDeclaration();
    init_instancesDeclaration();
    init_morphTargetsVertexGlobal();
    init_morphTargetsVertex();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    name = "meshUVSpaceRendererVertexShader";
    shader = `attribute position: vec3f;attribute normal: vec3f;attribute uv: vec2f;uniform projMatrix: mat4x4f;varying vDecalTC: vec2f;
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<morphTargetsVertexGlobalDeclaration>
#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]
#include<instancesDeclaration>
@vertex
fn main(input : VertexInputs)->FragmentInputs {var positionUpdated: vec3f=input.position;var normalUpdated: vec3f=input.normal;
#include<morphTargetsVertexGlobal>
#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
var worldPos: vec4f=finalWorld* vec4f(positionUpdated,1.0);var normWorldSM: mat3x3f= mat3x3f(finalWorld[0].xyz,finalWorld[1].xyz,finalWorld[2].xyz);var vNormalW: vec3f;
#if defined(INSTANCES) && defined(THIN_INSTANCES)
vNormalW=normalUpdated/ vec3f(dot(normWorldSM[0],normWorldSM[0]),dot(normWorldSM[1],normWorldSM[1]),dot(normWorldSM[2],normWorldSM[2]));vNormalW=normalize(normWorldSM*vNormalW);
#else
#ifdef NONUNIFORMSCALING
normWorldSM=transposeMat3(inverseMat3(normWorldSM));
#endif
vNormalW=normalize(normWorldSM*normalUpdated);
#endif
var normalView: vec3f=normalize((uniforms.projMatrix* vec4f(vNormalW,0.0)).xyz);var decalTC: vec3f=(uniforms.projMatrix*worldPos).xyz;vertexOutputs.vDecalTC=decalTC.xy;vertexOutputs.position=vec4f(input.uv*2.0-1.0,select(decalTC.z,2.,normalView.z>0.0),1.0);}`;
    ShaderStore.ShadersStoreWGSL[name] = shader;
    meshUVSpaceRendererVertexShaderWGSL = { name, shader };
  }
});

export {
  meshUVSpaceRendererVertexShaderWGSL,
  init_meshUVSpaceRenderer_vertex
};
//# sourceMappingURL=chunk-RZISQR2I.js.map
