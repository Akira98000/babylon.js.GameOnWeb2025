{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/abstractAudioBus.ts"],
  "sourcesContent": ["import { AbstractNamedAudioNode, AudioNodeType } from \"./abstractAudioNode\";\nimport type { AudioEngineV2 } from \"./audioEngineV2\";\nimport type { _AbstractAudioSubGraph } from \"./subNodes/abstractAudioSubGraph\";\nimport { _GetVolumeAudioProperty, _GetVolumeAudioSubNode } from \"./subNodes/volumeAudioSubNode\";\n\n/**\n * Abstract class representing an audio bus with volume control.\n *\n * An audio bus is a node in the audio graph that can have multiple inputs and outputs. It is typically used to group\n * sounds together and apply effects to them.\n */\nexport abstract class AbstractAudioBus extends AbstractNamedAudioNode {\n    protected abstract _subGraph: _AbstractAudioSubGraph;\n\n    protected constructor(name: string, engine: AudioEngineV2) {\n        super(name, engine, AudioNodeType.HAS_INPUTS_AND_OUTPUTS);\n    }\n\n    /**\n     * The output volume of the bus.\n     */\n    public get volume(): number {\n        return _GetVolumeAudioProperty(this._subGraph, \"volume\");\n    }\n\n    public set volume(value: number) {\n        // The volume subnode is created on initialization and should always exist.\n        const node = _GetVolumeAudioSubNode(this._subGraph);\n        if (!node) {\n            throw new Error(\"No volume subnode\");\n        }\n\n        node.volume = value;\n    }\n\n    /**\n     * Releases associated resources.\n     */\n    public override dispose(): void {\n        super.dispose();\n        this._subGraph.dispose();\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA,IAWsB;AAXtB;;;AAGA;AAQM,IAAgB,mBAAhB,cAAyC,uBAAsB;MAGjE,YAAsB,MAAc,QAAqB;AACrD;UAAM;UAAM;UAAM;;QAAA;MACtB;;;;MAKA,IAAW,SAAM;AACb,eAAO,wBAAwB,KAAK,WAAW,QAAQ;MAC3D;MAEA,IAAW,OAAO,OAAa;AAE3B,cAAM,OAAO,uBAAuB,KAAK,SAAS;AAClD,YAAI,CAAC,MAAM;AACP,gBAAM,IAAI,MAAM,mBAAmB;QACvC;AAEA,aAAK,SAAS;MAClB;;;;MAKgB,UAAO;AACnB,cAAM,QAAO;AACb,aAAK,UAAU,QAAO;MAC1B;;;;",
  "names": []
}
