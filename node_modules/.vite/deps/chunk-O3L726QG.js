import {
  init_logDepthFragment
} from "./chunk-6FCRHFM3.js";
import {
  init_fogFragment
} from "./chunk-6TNA3O2G.js";
import {
  init_clipPlaneFragmentDeclaration
} from "./chunk-6MLWHJ6U.js";
import {
  init_fogFragmentDeclaration
} from "./chunk-L7DVNLJS.js";
import {
  init_clipPlaneFragment
} from "./chunk-I6AZJ6MS.js";
import {
  init_logDepthDeclaration
} from "./chunk-5QHKRIJF.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/gaussianSplattingFragmentDeclaration.js
var name, shader;
var init_gaussianSplattingFragmentDeclaration = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/gaussianSplattingFragmentDeclaration.js"() {
    init_shaderStore();
    init_logDepthFragment();
    init_fogFragment();
    name = "gaussianSplattingFragmentDeclaration";
    shader = `fn gaussianColor(inColor: vec4f,inPosition: vec2f)->vec4f
{var A : f32=-dot(inPosition,inPosition);if (A>-4.0)
{var B: f32=exp(A)*inColor.a;
#include<logDepthFragment>
var color: vec3f=inColor.rgb;
#ifdef FOG
#include<fogFragment>
#endif
return vec4f(color,B);} else {return vec4f(0.0);}}
`;
    ShaderStore.IncludesShadersStoreWGSL[name] = shader;
  }
});

// node_modules/@babylonjs/core/ShadersWGSL/gaussianSplatting.fragment.js
var name2, shader2, gaussianSplattingPixelShaderWGSL;
var init_gaussianSplatting_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/gaussianSplatting.fragment.js"() {
    init_shaderStore();
    init_clipPlaneFragmentDeclaration();
    init_logDepthDeclaration();
    init_fogFragmentDeclaration();
    init_gaussianSplattingFragmentDeclaration();
    init_clipPlaneFragment();
    name2 = "gaussianSplattingPixelShader";
    shader2 = `#include<clipPlaneFragmentDeclaration>
#include<logDepthDeclaration>
#include<fogFragmentDeclaration>
varying vColor: vec4f;varying vPosition: vec2f;
#include<gaussianSplattingFragmentDeclaration>
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {
#include<clipPlaneFragment>
fragmentOutputs.color=gaussianColor(input.vColor,input.vPosition);}
`;
    ShaderStore.ShadersStoreWGSL[name2] = shader2;
    gaussianSplattingPixelShaderWGSL = { name: name2, shader: shader2 };
  }
});

export {
  gaussianSplattingPixelShaderWGSL,
  init_gaussianSplatting_fragment
};
//# sourceMappingURL=chunk-O3L726QG.js.map
