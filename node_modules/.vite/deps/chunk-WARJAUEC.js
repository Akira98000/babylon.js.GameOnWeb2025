import {
  init_pointCloudVertex
} from "./chunk-3UPVWSOU.js";
import {
  init_instancesDeclaration
} from "./chunk-42JLCGHG.js";
import {
  init_instancesVertex
} from "./chunk-AD2BDCGE.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-ZCX6R6OU.js";
import {
  init_morphTargetsVertex
} from "./chunk-733YFJU3.js";
import {
  init_bonesVertex
} from "./chunk-UNPOS5SC.js";
import {
  init_bonesDeclaration
} from "./chunk-4HQUZNQB.js";
import {
  init_morphTargetsVertexGlobalDeclaration
} from "./chunk-EQMW5TG6.js";
import {
  init_morphTargetsVertexDeclaration
} from "./chunk-HJ3UPKGE.js";
import {
  init_morphTargetsVertexGlobal
} from "./chunk-ICQ35FPL.js";
import {
  init_clipPlaneVertex
} from "./chunk-PMBT47KA.js";
import {
  init_clipPlaneVertexDeclaration
} from "./chunk-ALCMBW77.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/Shaders/ShadersInclude/pointCloudVertexDeclaration.js
var name, shader;
var init_pointCloudVertexDeclaration = __esm({
  "node_modules/@babylonjs/core/Shaders/ShadersInclude/pointCloudVertexDeclaration.js"() {
    init_shaderStore();
    name = "pointCloudVertexDeclaration";
    shader = `#ifdef POINTSIZE
uniform float pointSize;
#endif
`;
    ShaderStore.IncludesShadersStore[name] = shader;
  }
});

// node_modules/@babylonjs/core/Shaders/depth.vertex.js
var name2, shader2, depthVertexShader;
var init_depth_vertex = __esm({
  "node_modules/@babylonjs/core/Shaders/depth.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_morphTargetsVertexGlobalDeclaration();
    init_morphTargetsVertexDeclaration();
    init_clipPlaneVertexDeclaration();
    init_instancesDeclaration();
    init_pointCloudVertexDeclaration();
    init_morphTargetsVertexGlobal();
    init_morphTargetsVertex();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    init_clipPlaneVertex();
    init_pointCloudVertex();
    name2 = "depthVertexShader";
    shader2 = `attribute vec3 position;
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<morphTargetsVertexGlobalDeclaration>
#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]
#include<clipPlaneVertexDeclaration>
#include<instancesDeclaration>
uniform mat4 viewProjection;uniform vec2 depthValues;
#if defined(ALPHATEST) || defined(NEED_UV)
varying vec2 vUV;uniform mat4 diffuseMatrix;
#ifdef UV1
attribute vec2 uv;
#endif
#ifdef UV2
attribute vec2 uv2;
#endif
#endif
#ifdef STORE_CAMERASPACE_Z
uniform mat4 view;varying vec4 vViewPos;
#endif
#include<pointCloudVertexDeclaration>
varying float vDepthMetric;
#define CUSTOM_VERTEX_DEFINITIONS
void main(void)
{vec3 positionUpdated=position;
#ifdef UV1
vec2 uvUpdated=uv;
#endif
#ifdef UV2
vec2 uv2Updated=uv2;
#endif
#include<morphTargetsVertexGlobal>
#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
vec4 worldPos=finalWorld*vec4(positionUpdated,1.0);
#include<clipPlaneVertex>
gl_Position=viewProjection*worldPos;
#ifdef STORE_CAMERASPACE_Z
vViewPos=view*worldPos;
#else
#ifdef USE_REVERSE_DEPTHBUFFER
vDepthMetric=((-gl_Position.z+depthValues.x)/(depthValues.y));
#else
vDepthMetric=((gl_Position.z+depthValues.x)/(depthValues.y));
#endif
#endif
#if defined(ALPHATEST) || defined(BASIC_RENDER)
#ifdef UV1
vUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));
#endif
#ifdef UV2
vUV=vec2(diffuseMatrix*vec4(uv2Updated,1.0,0.0));
#endif
#endif
#include<pointCloudVertex>
}
`;
    ShaderStore.ShadersStore[name2] = shader2;
    depthVertexShader = { name: name2, shader: shader2 };
  }
});

export {
  depthVertexShader,
  init_depth_vertex
};
//# sourceMappingURL=chunk-WARJAUEC.js.map
