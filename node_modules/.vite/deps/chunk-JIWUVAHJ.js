import {
  _AbstractAudioSubNode,
  _GetVolumeAudioSubNode,
  _WebAudioBaseSubGraph,
  init_abstractAudioSubNode,
  init_volumeAudioSubNode,
  init_webAudioBaseSubGraph
} from "./chunk-JEUOGWAP.js";
import {
  Matrix,
  Quaternion,
  Vector3,
  init_math_vector
} from "./chunk-GGQSTLQM.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/abstractSpatialAudio.js
function _HasSpatialAudioOptions(options) {
  return options.spatialEnabled || options.spatialAutoUpdate !== void 0 || options.spatialConeInnerAngle !== void 0 || options.spatialConeOuterAngle !== void 0 || options.spatialConeOuterVolume !== void 0 || options.spatialDistanceModel !== void 0 || options.spatialMaxDistance !== void 0 || options.spatialPanningModel !== void 0 || options.spatialPosition !== void 0 || options.spatialReferenceDistance !== void 0 || options.spatialRolloffFactor !== void 0 || options.spatialRotation !== void 0 || options.spatialRotationQuaternion !== void 0;
}
var _SpatialAudioDefaults, AbstractSpatialAudio;
var init_abstractSpatialAudio = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/abstractSpatialAudio.js"() {
    init_math_vector();
    _SpatialAudioDefaults = {
      coneInnerAngle: 6.28318530718,
      coneOuterAngle: 6.28318530718,
      coneOuterVolume: 0,
      distanceModel: "inverse",
      maxDistance: 1e4,
      panningModel: "equalpower",
      position: Vector3.Zero(),
      referenceDistance: 1,
      rolloffFactor: 1,
      rotation: Vector3.Zero(),
      rotationQuaternion: new Quaternion()
    };
    AbstractSpatialAudio = class {
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/abstractStereoAudio.js
function _HasStereoAudioOptions(options) {
  return options.stereoEnabled || options.stereoPan !== void 0;
}
var _StereoAudioDefaults, AbstractStereoAudio;
var init_abstractStereoAudio = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/abstractStereoAudio.js"() {
    _StereoAudioDefaults = {
      pan: 0
    };
    AbstractStereoAudio = class {
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/abstractAudio/subNodes/stereoAudioSubNode.js
function _GetStereoAudioSubNode(subGraph) {
  return subGraph.getSubNode(
    "Stereo"
    /* AudioSubNode.STEREO */
  );
}
function _GetStereoAudioProperty(subGraph, property) {
  var _a;
  return ((_a = _GetStereoAudioSubNode(subGraph)) == null ? void 0 : _a[property]) ?? _StereoAudioDefaults[property];
}
function _SetStereoAudioProperty(subGraph, property, value) {
  subGraph.callOnSubNode("Stereo", (node) => {
    node[property] = value;
  });
}
var _StereoAudioSubNode;
var init_stereoAudioSubNode = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/subNodes/stereoAudioSubNode.js"() {
    init_abstractAudioSubNode();
    init_abstractStereoAudio();
    _StereoAudioSubNode = class extends _AbstractAudioSubNode {
      constructor(engine) {
        super("Stereo", engine);
      }
      /** @internal */
      setOptions(options) {
        this.pan = options.stereoPan ?? _StereoAudioDefaults.pan;
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/stereoAudio.js
var _StereoAudio;
var init_stereoAudio = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/stereoAudio.js"() {
    init_abstractStereoAudio();
    init_stereoAudioSubNode();
    _StereoAudio = class extends AbstractStereoAudio {
      /** @internal */
      constructor(subGraph) {
        super();
        this._subGraph = subGraph;
      }
      /** @internal */
      get pan() {
        return _GetStereoAudioProperty(this._subGraph, "pan");
      }
      set pan(value) {
        _SetStereoAudioProperty(this._subGraph, "pan", value);
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/abstractAudio/subNodes/spatialAudioSubNode.js
function _GetSpatialAudioSubNode(subGraph) {
  return subGraph.getSubNode(
    "Spatial"
    /* AudioSubNode.SPATIAL */
  );
}
function _GetSpatialAudioProperty(subGraph, property) {
  var _a;
  return ((_a = _GetSpatialAudioSubNode(subGraph)) == null ? void 0 : _a[property]) ?? _SpatialAudioDefaults[property];
}
function _SetSpatialAudioProperty(subGraph, property, value) {
  subGraph.callOnSubNode("Spatial", (node) => {
    node[property] = value;
  });
}
var _SpatialAudioSubNode;
var init_spatialAudioSubNode = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/subNodes/spatialAudioSubNode.js"() {
    init_abstractSpatialAudio();
    init_abstractAudioSubNode();
    _SpatialAudioSubNode = class extends _AbstractAudioSubNode {
      constructor(engine) {
        super("Spatial", engine);
      }
      /** @internal */
      setOptions(options) {
        this.coneInnerAngle = options.spatialConeInnerAngle ?? _SpatialAudioDefaults.coneInnerAngle;
        this.coneOuterAngle = options.spatialConeOuterAngle ?? _SpatialAudioDefaults.coneOuterAngle;
        this.coneOuterVolume = options.spatialConeOuterVolume ?? _SpatialAudioDefaults.coneOuterVolume;
        this.distanceModel = options.spatialDistanceModel ?? _SpatialAudioDefaults.distanceModel;
        this.maxDistance = options.spatialMaxDistance ?? _SpatialAudioDefaults.maxDistance;
        this.panningModel = options.spatialPanningModel ?? _SpatialAudioDefaults.panningModel;
        this.referenceDistance = options.spatialReferenceDistance ?? _SpatialAudioDefaults.referenceDistance;
        this.rolloffFactor = options.spatialRolloffFactor ?? _SpatialAudioDefaults.rolloffFactor;
        if (options.spatialPosition !== void 0) {
          this.position = options.spatialPosition.clone();
        }
        if (options.spatialRotationQuaternion !== void 0) {
          this.rotationQuaternion = options.spatialRotationQuaternion.clone();
        } else if (options.spatialRotation !== void 0) {
          this.rotation = options.spatialRotation.clone();
        } else {
          this.rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        }
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/webAudio/subNodes/spatialWebAudioSubNode.js
function d2r(degrees) {
  return degrees * Math.PI / 180;
}
function r2d(radians) {
  return radians * 180 / Math.PI;
}
async function _CreateSpatialAudioSubNodeAsync(engine) {
  return new _SpatialWebAudioSubNode(engine);
}
var TmpMatrix, TmpVector, _SpatialWebAudioSubNode;
var init_spatialWebAudioSubNode = __esm({
  "node_modules/@babylonjs/core/AudioV2/webAudio/subNodes/spatialWebAudioSubNode.js"() {
    init_math_vector();
    init_spatialAudioSubNode();
    init_abstractSpatialAudio();
    TmpMatrix = Matrix.Zero();
    TmpVector = Vector3.Zero();
    _SpatialWebAudioSubNode = class extends _SpatialAudioSubNode {
      /** @internal */
      constructor(engine) {
        super(engine);
        this._position = _SpatialAudioDefaults.position.clone();
        this._rotation = _SpatialAudioDefaults.rotation.clone();
        this._rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        this._webAudioRotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        this.node = new PannerNode(engine.audioContext);
      }
      /** @internal */
      get coneInnerAngle() {
        return d2r(this.node.coneInnerAngle);
      }
      set coneInnerAngle(value) {
        this.node.coneInnerAngle = r2d(value);
      }
      /** @internal */
      get coneOuterAngle() {
        return d2r(this.node.coneOuterAngle);
      }
      set coneOuterAngle(value) {
        this.node.coneOuterAngle = r2d(value);
      }
      /** @internal */
      get coneOuterVolume() {
        return this.node.coneOuterGain;
      }
      set coneOuterVolume(value) {
        this.node.coneOuterGain = value;
      }
      /** @internal */
      get distanceModel() {
        return this.node.distanceModel;
      }
      set distanceModel(value) {
        this.node.distanceModel = value;
        const maxDistance = this.node.maxDistance;
        this.node.maxDistance = maxDistance + 1e-3;
        this.node.maxDistance = maxDistance;
      }
      /** @internal */
      get maxDistance() {
        return this.node.maxDistance;
      }
      set maxDistance(value) {
        this.node.maxDistance = value;
      }
      /** @internal */
      get panningModel() {
        return this.node.panningModel;
      }
      set panningModel(value) {
        this.node.panningModel = value;
      }
      /** @internal */
      get position() {
        return this._position;
      }
      set position(value) {
        this._position.copyFrom(value);
        this.node.positionX.value = value.x;
        this.node.positionY.value = value.y;
        this.node.positionZ.value = value.z;
      }
      /** @internal */
      get referenceDistance() {
        return this.node.refDistance;
      }
      set referenceDistance(value) {
        this.node.refDistance = value;
      }
      /** @internal */
      get rolloffFactor() {
        return this.node.rolloffFactor;
      }
      set rolloffFactor(value) {
        this.node.rolloffFactor = value;
      }
      /** @internal */
      get rotation() {
        return this._rotation;
      }
      set rotation(value) {
        this._rotation.copyFrom(value);
        Quaternion.FromEulerAnglesToRef(value.x, value.y, value.z, this._webAudioRotationQuaternion);
        this._updateRotation();
      }
      /** @internal */
      get rotationQuaternion() {
        return this._rotationQuaternion;
      }
      set rotationQuaternion(value) {
        this._rotationQuaternion.copyFrom(value);
        this._webAudioRotationQuaternion.copyFrom(value);
        this._updateRotation();
      }
      /** @internal */
      get inNode() {
        return this.node;
      }
      /** @internal */
      get outNode() {
        return this.node;
      }
      _connect(node) {
        const connected = super._connect(node);
        if (!connected) {
          return false;
        }
        if (node.inNode) {
          this.node.connect(node.inNode);
        }
        return true;
      }
      _disconnect(node) {
        const disconnected = super._disconnect(node);
        if (!disconnected) {
          return false;
        }
        if (node.inNode) {
          this.node.disconnect(node.inNode);
        }
        return true;
      }
      /** @internal */
      getClassName() {
        return "_SpatialWebAudioSubNode";
      }
      _updateRotation() {
        Matrix.FromQuaternionToRef(this._webAudioRotationQuaternion, TmpMatrix);
        Vector3.TransformNormalToRef(Vector3.Right(), TmpMatrix, TmpVector);
        this.node.orientationX.value = TmpVector.x;
        this.node.orientationY.value = TmpVector.y;
        this.node.orientationZ.value = TmpVector.z;
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/webAudio/subNodes/stereoWebAudioSubNode.js
async function _CreateStereoAudioSubNodeAsync(engine) {
  return new _StereoWebAudioSubNode(engine);
}
var _StereoWebAudioSubNode;
var init_stereoWebAudioSubNode = __esm({
  "node_modules/@babylonjs/core/AudioV2/webAudio/subNodes/stereoWebAudioSubNode.js"() {
    init_stereoAudioSubNode();
    _StereoWebAudioSubNode = class extends _StereoAudioSubNode {
      /** @internal */
      constructor(engine) {
        super(engine);
        this.node = new StereoPannerNode(engine.audioContext);
      }
      /** @internal */
      get pan() {
        return this.node.pan.value;
      }
      /** @internal */
      set pan(value) {
        this.node.pan.value = value;
      }
      /** @internal */
      get inNode() {
        return this.node;
      }
      /** @internal */
      get outNode() {
        return this.node;
      }
      /** @internal */
      getClassName() {
        return "_StereoWebAudioSubNode";
      }
      _connect(node) {
        const connected = super._connect(node);
        if (!connected) {
          return false;
        }
        if (node.inNode) {
          this.node.connect(node.inNode);
        }
        return true;
      }
      _disconnect(node) {
        const disconnected = super._disconnect(node);
        if (!disconnected) {
          return false;
        }
        if (node.inNode) {
          this.node.disconnect(node.inNode);
        }
        return true;
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/webAudio/subNodes/webAudioBusAndSoundSubGraph.js
var _WebAudioBusAndSoundSubGraph;
var init_webAudioBusAndSoundSubGraph = __esm({
  "node_modules/@babylonjs/core/AudioV2/webAudio/subNodes/webAudioBusAndSoundSubGraph.js"() {
    init_spatialAudioSubNode();
    init_stereoAudioSubNode();
    init_volumeAudioSubNode();
    init_abstractSpatialAudio();
    init_abstractStereoAudio();
    init_spatialWebAudioSubNode();
    init_stereoWebAudioSubNode();
    init_webAudioBaseSubGraph();
    _WebAudioBusAndSoundSubGraph = class extends _WebAudioBaseSubGraph {
      constructor() {
        super(...arguments);
        this._inNode = null;
      }
      /** @internal */
      async init(options) {
        var _a, _b;
        super.init(options);
        let hasSpatialOptions = false;
        let hasStereoOptions = false;
        if (hasSpatialOptions = _HasSpatialAudioOptions(options)) {
          this._createAndAddSubNode(
            "Spatial"
            /* AudioSubNode.SPATIAL */
          );
        }
        if (hasStereoOptions = _HasStereoAudioOptions(options)) {
          this._createAndAddSubNode(
            "Stereo"
            /* AudioSubNode.STEREO */
          );
        }
        await this._createSubNodePromisesResolved();
        if (hasSpatialOptions) {
          (_a = _GetSpatialAudioSubNode(this)) == null ? void 0 : _a.setOptions(options);
        }
        if (hasStereoOptions) {
          (_b = _GetStereoAudioSubNode(this)) == null ? void 0 : _b.setOptions(options);
        }
      }
      /** @internal */
      get inNode() {
        return this._inNode;
      }
      _createSubNode(name) {
        const node = super._createSubNode(name);
        if (node) {
          return node;
        }
        switch (name) {
          case "Spatial":
            return _CreateSpatialAudioSubNodeAsync(this._owner.engine);
          case "Stereo":
            return _CreateStereoAudioSubNodeAsync(this._owner.engine);
          default:
            return null;
        }
      }
      _onSubNodesChanged() {
        var _a, _b;
        const spatialNode = _GetSpatialAudioSubNode(this);
        const stereoNode = _GetStereoAudioSubNode(this);
        const volumeNode = _GetVolumeAudioSubNode(this);
        if (spatialNode && spatialNode.getClassName() !== "_SpatialWebAudioSubNode") {
          throw new Error("Not a WebAudio subnode.");
        }
        if (stereoNode && stereoNode.getClassName() !== "_StereoWebAudioSubNode") {
          throw new Error("Not a WebAudio subnode.");
        }
        if (volumeNode && volumeNode.getClassName() !== "_VolumeWebAudioSubNode") {
          throw new Error("Not a WebAudio subnode.");
        }
        if (spatialNode) {
          spatialNode.disconnectAll();
          if (stereoNode) {
            spatialNode.connect(stereoNode);
          } else if (volumeNode) {
            spatialNode.connect(volumeNode);
          }
        }
        if (stereoNode) {
          stereoNode.disconnectAll();
          if (volumeNode) {
            stereoNode.connect(volumeNode);
          }
        }
        let inSubNode = null;
        if (spatialNode) {
          inSubNode = spatialNode;
        } else if (stereoNode) {
          inSubNode = stereoNode;
        } else if (volumeNode) {
          inSubNode = volumeNode;
        }
        const inNode = (inSubNode == null ? void 0 : inSubNode.node) ?? null;
        if (this._inNode !== inNode) {
          if (this._inNode && this._upstreamNodes) {
            const it = this._upstreamNodes.values();
            for (let next = it.next(); !next.done; next = it.next()) {
              (_a = next.value.outNode) == null ? void 0 : _a.disconnect(this._inNode);
            }
          }
          this._inNode = inNode;
          if (inNode && this._upstreamNodes) {
            const it = this._upstreamNodes.values();
            for (let next = it.next(); !next.done; next = it.next()) {
              (_b = next.value.outNode) == null ? void 0 : _b.connect(inNode);
            }
          }
        }
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/spatialAudio.js
var _SpatialAudio;
var init_spatialAudio = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/subProperties/spatialAudio.js"() {
    init_spatialAudioSubNode();
    init_abstractSpatialAudio();
    _SpatialAudio = class extends AbstractSpatialAudio {
      /** @internal */
      constructor(subGraph) {
        super();
        this._position = _SpatialAudioDefaults.position.clone();
        this._rotation = _SpatialAudioDefaults.rotation.clone();
        this._rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();
        this._subGraph = subGraph;
      }
      /** @internal */
      get coneInnerAngle() {
        return _GetSpatialAudioProperty(this._subGraph, "coneInnerAngle") ?? _SpatialAudioDefaults.coneInnerAngle;
      }
      set coneInnerAngle(value) {
        _SetSpatialAudioProperty(this._subGraph, "coneInnerAngle", value);
      }
      /** @internal */
      get coneOuterAngle() {
        return _GetSpatialAudioProperty(this._subGraph, "coneOuterAngle") ?? _SpatialAudioDefaults.coneOuterAngle;
      }
      set coneOuterAngle(value) {
        _SetSpatialAudioProperty(this._subGraph, "coneOuterAngle", value);
      }
      /** @internal */
      get coneOuterVolume() {
        return _GetSpatialAudioProperty(this._subGraph, "coneOuterVolume") ?? _SpatialAudioDefaults.coneOuterVolume;
      }
      set coneOuterVolume(value) {
        _SetSpatialAudioProperty(this._subGraph, "coneOuterVolume", value);
      }
      /** @internal */
      get distanceModel() {
        return _GetSpatialAudioProperty(this._subGraph, "distanceModel") ?? _SpatialAudioDefaults.distanceModel;
      }
      set distanceModel(value) {
        _SetSpatialAudioProperty(this._subGraph, "distanceModel", value);
      }
      /** @internal */
      get maxDistance() {
        return _GetSpatialAudioProperty(this._subGraph, "maxDistance") ?? _SpatialAudioDefaults.maxDistance;
      }
      set maxDistance(value) {
        if (value <= 0) {
          value = 1e-6;
        }
        _SetSpatialAudioProperty(this._subGraph, "maxDistance", value);
      }
      /** @internal */
      get panningModel() {
        return _GetSpatialAudioProperty(this._subGraph, "panningModel") ?? _SpatialAudioDefaults.panningModel;
      }
      set panningModel(value) {
        _SetSpatialAudioProperty(this._subGraph, "panningModel", value);
      }
      /** @internal */
      get position() {
        return this._position;
      }
      set position(value) {
        this._position = value;
        this._updatePosition();
      }
      /** @internal */
      get referenceDistance() {
        return _GetSpatialAudioProperty(this._subGraph, "referenceDistance") ?? _SpatialAudioDefaults.referenceDistance;
      }
      set referenceDistance(value) {
        _SetSpatialAudioProperty(this._subGraph, "referenceDistance", value);
      }
      /** @internal */
      get rolloffFactor() {
        return _GetSpatialAudioProperty(this._subGraph, "rolloffFactor") ?? _SpatialAudioDefaults.rolloffFactor;
      }
      set rolloffFactor(value) {
        _SetSpatialAudioProperty(this._subGraph, "rolloffFactor", value);
      }
      /** @internal */
      get rotation() {
        return this._rotation;
      }
      set rotation(value) {
        this._rotation = value;
        this._updateRotation();
      }
      /** @internal */
      get rotationQuaternion() {
        return this._rotationQuaternion;
      }
      set rotationQuaternion(value) {
        this._rotationQuaternion = value;
        this._updateRotation();
      }
      /** @internal */
      update() {
        const subNode = _GetSpatialAudioSubNode(this._subGraph);
        this._updatePosition(subNode);
        this._updateRotation(subNode);
      }
      _updatePosition(subNode = null) {
        if (!subNode) {
          subNode = _GetSpatialAudioSubNode(this._subGraph);
          if (!subNode) {
            return;
          }
        }
        const position = subNode.position;
        if (!position.equalsWithEpsilon(this._position)) {
          subNode.position = this._position;
        }
      }
      _updateRotation(subNode = null) {
        if (!subNode) {
          subNode = _GetSpatialAudioSubNode(this._subGraph);
          if (!subNode) {
            return;
          }
        }
        if (!subNode.rotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {
          subNode.rotationQuaternion = this._rotationQuaternion;
        } else if (!subNode.rotation.equalsWithEpsilon(this._rotation)) {
          subNode.rotation = this._rotation;
        }
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/webAudio/subProperties/spatialWebAudio.js
var _SpatialWebAudio;
var init_spatialWebAudio = __esm({
  "node_modules/@babylonjs/core/AudioV2/webAudio/subProperties/spatialWebAudio.js"() {
    init_spatialAudio();
    _SpatialWebAudio = class extends _SpatialAudio {
      /** @internal */
      constructor(subGraph, autoUpdate) {
        super(subGraph);
        this._autoUpdate = false;
        if (!autoUpdate) {
          return;
        }
        this._autoUpdate = true;
        const update = () => {
          if (!this._autoUpdate) {
            return;
          }
          this.update();
          requestAnimationFrame(update);
        };
        requestAnimationFrame(update);
      }
      /** @internal */
      dispose() {
        this._autoUpdate = false;
      }
    };
  }
});

export {
  _SpatialAudioDefaults,
  _HasSpatialAudioOptions,
  AbstractSpatialAudio,
  init_abstractSpatialAudio,
  _StereoAudioDefaults,
  _HasStereoAudioOptions,
  AbstractStereoAudio,
  init_abstractStereoAudio,
  _StereoAudio,
  init_stereoAudio,
  _WebAudioBusAndSoundSubGraph,
  init_webAudioBusAndSoundSubGraph,
  _SpatialWebAudio,
  init_spatialWebAudio
};
//# sourceMappingURL=chunk-JIWUVAHJ.js.map
