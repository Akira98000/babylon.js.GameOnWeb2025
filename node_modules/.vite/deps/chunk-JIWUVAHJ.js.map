{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractSpatialAudio.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractStereoAudio.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/stereoAudioSubNode.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/stereoAudio.ts", "../../../dev/core/src/AudioV2/abstractAudio/subNodes/spatialAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/spatialWebAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/stereoWebAudioSubNode.ts", "../../../dev/core/src/AudioV2/webAudio/subNodes/webAudioBusAndSoundSubGraph.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/spatialAudio.ts", "../../../dev/core/src/AudioV2/webAudio/subProperties/spatialWebAudio.ts"],
  "sourcesContent": ["import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\n\nexport const _SpatialAudioDefaults = {\n    coneInnerAngle: 6.28318530718 as number,\n    coneOuterAngle: 6.28318530718 as number,\n    coneOuterVolume: 0 as number,\n    distanceModel: \"inverse\" as DistanceModelType,\n    maxDistance: 10000 as number,\n    panningModel: \"equalpower\" as PanningModelType,\n    position: Vector3.Zero(),\n    referenceDistance: 1 as number,\n    rolloffFactor: 1 as number,\n    rotation: Vector3.Zero(),\n    rotationQuaternion: new Quaternion(),\n} as const;\n\n/**\n * Options for spatial audio.\n */\nexport interface ISpatialAudioOptions {\n    /**\n     * Whether to automatically update the spatial properties of the audio node. Defaults to `true`.\n     */\n    spatialAutoUpdate: boolean;\n    /**\n     * The spatial cone inner angle, in radians. Defaults to 2π.\n     * - When the listener is inside the cone inner angle, the volume is at its maximum.\n     */\n    spatialConeInnerAngle: number;\n    /**\n     * The spatial cone outer angle, in radians. Defaults to 2π.\n     * - When the listener is between the the cone inner and outer angles, the volume fades to its minimum as the listener approaches the outer angle.\n     * - When the listener is outside the cone outer angle, the volume is at its minimum.\n     */\n    spatialConeOuterAngle: number;\n    /**\n     * The amount of volume reduction outside the {@link spatialConeOuterAngle}. Defaults to 0.\n     */\n    spatialConeOuterVolume: number;\n    /**\n     * The algorithm to use to reduce the volume of the audio source as it moves away from the listener. Defaults to \"inverse\".\n     *\n     * Possible values are:\n     * - `\"linear\"`: The volume is reduced linearly as the source moves away from the listener.\n     * - `\"inverse\"`: The volume is reduced inversely as the source moves away from the listener.\n     * - `\"exponential\"`: The volume is reduced exponentially as the source moves away from the listener.\n     *\n     * @see {@link spatialMaxDistance}\n     * @see {@link spatialReferenceDistance}\n     * @see {@link spatialRolloffFactor}\n     */\n    spatialDistanceModel: \"linear\" | \"inverse\" | \"exponential\";\n    /**\n     * Enable spatial audio. Defaults to false.\n     *\n     * When set to `true`, the audio node's spatial properties will be initialized on creation and there will be no\n     * delay when setting the first spatial value.\n     *\n     * When not specified, or set to `false`, the audio node's spatial properties will not be initialized on creation\n     * and there will be a small delay when setting the first spatial value.\n     *\n     * - This option is ignored if any other spatial options are set.\n     */\n    spatialEnabled: boolean;\n    /**\n     * The maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to 10000.\n     * - This value is used only when the {@link spatialDistanceModel} is set to `\"linear\"`.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialMaxDistance: number;\n    /**\n     * The spatial panning model. Defaults to \"equalpower\".\n     * - \"equalpower\" requires less CPU than \"HRTF\" but is less realistic for listeners with headphones or speakers close to the ears.\n     * - \"HRTF\" requires more CPU but is more realistic for listeners with headphones or speakers close to the ears.\n     *\n     * Possible values are:\n     * - `\"equalpower\"`: Represents the equal-power panning algorithm, generally regarded as simple and efficient.\n     * - `\"HRTF\"`:Renders a stereo output of higher quality than `\"equalpower\"` — it uses a convolution with measured impulse responses from human subjects.\n     */\n    spatialPanningModel: \"equalpower\" | \"HRTF\";\n    /**\n     * The spatial position. Defaults to (0, 0, 0).\n     */\n    spatialPosition: Vector3;\n    /**\n     * The distance for reducing volume as the audio source moves away from the listener – i.e. the distance the volume reduction starts at. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialReferenceDistance: number;\n    /**\n     * How quickly the volume is reduced as the source moves away from the listener. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialRolloffFactor: number;\n    /**\n     * The spatial rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    spatialRotation: Vector3;\n    /**\n     * The spatial rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    spatialRotationQuaternion: Quaternion;\n}\n\n/**\n * @param options The spatial audio options to check.\n * @returns `true` if spatial audio options are defined, otherwise `false`.\n */\nexport function _HasSpatialAudioOptions(options: Partial<ISpatialAudioOptions>): boolean {\n    return (\n        options.spatialEnabled ||\n        options.spatialAutoUpdate !== undefined ||\n        options.spatialConeInnerAngle !== undefined ||\n        options.spatialConeOuterAngle !== undefined ||\n        options.spatialConeOuterVolume !== undefined ||\n        options.spatialDistanceModel !== undefined ||\n        options.spatialMaxDistance !== undefined ||\n        options.spatialPanningModel !== undefined ||\n        options.spatialPosition !== undefined ||\n        options.spatialReferenceDistance !== undefined ||\n        options.spatialRolloffFactor !== undefined ||\n        options.spatialRotation !== undefined ||\n        options.spatialRotationQuaternion !== undefined\n    );\n}\n\n/**\n * Abstract class representing the `spatial` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractSpatialAudio {\n    /**\n     * The spatial cone inner angle, in radians. Defaults to 2π.\n     * - When the listener is inside the cone inner angle, the volume is at its maximum.\n     */\n    public abstract coneInnerAngle: number;\n\n    /**\n     * The spatial cone outer angle, in radians. Defaults to 2π.\n     * - When the listener is between the the cone inner and outer angles, the volume fades to its minimum as the listener approaches the outer angle.\n     * - When the listener is outside the cone outer angle, the volume is at its minimum.\n     */\n    public abstract coneOuterAngle: number;\n\n    /**\n     * The amount of volume reduction outside the {@link coneOuterAngle}. Defaults to 0.\n     */\n    public abstract coneOuterVolume: number;\n\n    /**\n     * The algorithm to use to reduce the volume of the audio source as it moves away from the listener. Defaults to \"inverse\".\n     *\n     * Possible values are:\n     * - `\"linear\"`: The volume is reduced linearly as the source moves away from the listener.\n     * - `\"inverse\"`: The volume is reduced inversely as the source moves away from the listener.\n     * - `\"exponential\"`: The volume is reduced exponentially as the source moves away from the listener.\n     *\n     * @see {@link spatialMaxDistance}\n     * @see {@link spatialReferenceDistance}\n     * @see {@link spatialRolloffFactor}\n     */\n    public abstract distanceModel: \"linear\" | \"inverse\" | \"exponential\";\n\n    /**\n     * The maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to 10000.\n     * - This value is used only when the {@link distanceModel} is set to `\"linear\"`.\n     * @see {@link distanceModel}\n     */\n    public abstract maxDistance: number;\n\n    /**\n     * The spatial panning model. Defaults to \"equalpower\".\n     * - \"equalpower\" requires less CPU than \"HRTF\" but is less realistic for listeners with headphones or speakers close to the ears.\n     * - \"HRTF\" requires more CPU but is more realistic for listeners with headphones or speakers close to the ears.\n     *\n     * Possible values are:\n     * - `\"equalpower\"`: Represents the equal-power panning algorithm, generally regarded as simple and efficient.\n     * - `\"HRTF\"`:Renders a stereo output of higher quality than `\"equalpower\"` — it uses a convolution with measured impulse responses from human subjects.\n     */\n    public abstract panningModel: \"equalpower\" | \"HRTF\";\n\n    /**\n     * The spatial position. Defaults to (0, 0, 0).\n     */\n    public abstract position: Vector3;\n\n    /**\n     * The distance for reducing volume as the audio source moves away from the listener – i.e. the distance the volume reduction starts at. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link distanceModel}\n     */\n    public abstract referenceDistance: number;\n\n    /**\n     * How quickly the volume is reduced as the source moves away from the listener. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link distanceModel}\n     */\n    public abstract rolloffFactor: number;\n\n    /**\n     * The spatial rotation. Defaults to (0, 0, 0).\n     */\n    public abstract rotation: Vector3;\n\n    /**\n     * The spatial rotation quaternion. Defaults to (0, 0, 0, 1).\n     */\n    public abstract rotationQuaternion: Quaternion;\n\n    /**\n     * Updates the position and rotation properties.\n     */\n    public abstract update(): void;\n}\n", "export const _StereoAudioDefaults = {\n    pan: 0 as number,\n} as const;\n\n/** */\nexport interface IStereoAudioOptions {\n    /**\n     * Enable stereo. Defaults to false.\n     *\n     * When set to `true`, the audio node's stereo properties will be initialized on creation and there will be no\n     * delay when setting the first stereo value.\n     *\n     * When not specified, or set to `false`, the audio node's stereo properties will not be initialized on creation\n     * and there will be a small delay when setting the first stereo value.\n     *\n     * - This option is ignored if any other stereo options are set.\n     */\n    stereoEnabled: boolean;\n    /**\n     * The stereo pan from -1 (left) to 1 (right). Defaults to 0.\n     */\n    stereoPan: number;\n}\n\n/**\n * @param options The stereo audio options to check.\n * @returns `true` if stereo audio options are defined, otherwise `false`.\n */\nexport function _HasStereoAudioOptions(options: Partial<IStereoAudioOptions>): boolean {\n    return options.stereoEnabled || options.stereoPan !== undefined;\n}\n\n/**\n * Abstract class representing the `stereo` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractStereoAudio {\n    /**\n     * The stereo pan from -1 (left) to 1 (right). Defaults to 0.\n     */\n    public abstract pan: number;\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AudioEngineV2 } from \"../../abstractAudio/audioEngineV2\";\nimport { _AbstractAudioSubNode } from \"../../abstractAudio/subNodes/abstractAudioSubNode\";\nimport { AudioSubNode } from \"../../abstractAudio/subNodes/audioSubNode\";\nimport type { IStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport { _StereoAudioDefaults } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport type { _AbstractAudioSubGraph } from \"./abstractAudioSubGraph\";\n\n/** @internal */\nexport abstract class _StereoAudioSubNode extends _AbstractAudioSubNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(AudioSubNode.STEREO, engine);\n    }\n\n    abstract pan: number;\n\n    /** @internal */\n    public setOptions(options: Partial<IStereoAudioOptions>): void {\n        this.pan = options.stereoPan ?? _StereoAudioDefaults.pan;\n    }\n}\n\n/** @internal */\nexport function _GetStereoAudioSubNode(subGraph: _AbstractAudioSubGraph): Nullable<_StereoAudioSubNode> {\n    return subGraph.getSubNode<_StereoAudioSubNode>(AudioSubNode.STEREO);\n}\n\n/** @internal */\nexport function _GetStereoAudioProperty<K extends keyof typeof _StereoAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K): (typeof _StereoAudioDefaults)[K] {\n    return _GetStereoAudioSubNode(subGraph)?.[property] ?? _StereoAudioDefaults[property];\n}\n\n/** @internal */\nexport function _SetStereoAudioProperty<K extends keyof typeof _StereoAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K, value: _StereoAudioSubNode[K]): void {\n    subGraph.callOnSubNode<_StereoAudioSubNode>(AudioSubNode.STEREO, (node) => {\n        node[property] = value;\n    });\n}\n", "import { AbstractStereoAudio } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport type { _AbstractAudioSubGraph } from \"../subNodes/abstractAudioSubGraph\";\nimport { _GetStereoAudioProperty, _SetStereoAudioProperty } from \"../subNodes/stereoAudioSubNode\";\n\n/** @internal */\nexport class _StereoAudio extends AbstractStereoAudio {\n    private _subGraph: _AbstractAudioSubGraph;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph) {\n        super();\n        this._subGraph = subGraph;\n    }\n\n    /** @internal */\n    public get pan(): number {\n        return _GetStereoAudioProperty(this._subGraph, \"pan\");\n    }\n\n    public set pan(value: number) {\n        _SetStereoAudioProperty(this._subGraph, \"pan\", value);\n    }\n}\n", "import type { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Nullable } from \"../../../types\";\nimport type { AudioEngineV2 } from \"../audioEngineV2\";\nimport type { ISpatialAudioOptions } from \"../subProperties/abstractSpatialAudio\";\nimport { _SpatialAudioDefaults } from \"../subProperties/abstractSpatialAudio\";\nimport type { _AbstractAudioSubGraph } from \"./abstractAudioSubGraph\";\nimport { _AbstractAudioSubNode } from \"./abstractAudioSubNode\";\nimport { AudioSubNode } from \"./audioSubNode\";\n\n/** @internal */\nexport abstract class _SpatialAudioSubNode extends _AbstractAudioSubNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(AudioSubNode.SPATIAL, engine);\n    }\n\n    public abstract coneInnerAngle: number;\n    public abstract coneOuterAngle: number;\n    public abstract coneOuterVolume: number;\n    public abstract distanceModel: DistanceModelType;\n    public abstract maxDistance: number;\n    public abstract panningModel: PanningModelType;\n    public abstract position: Vector3;\n    public abstract referenceDistance: number;\n    public abstract rolloffFactor: number;\n    public abstract rotation: Vector3;\n    public abstract rotationQuaternion: Quaternion;\n    public abstract inNode: AudioNode;\n\n    /** @internal */\n    public setOptions(options: Partial<ISpatialAudioOptions>): void {\n        this.coneInnerAngle = options.spatialConeInnerAngle ?? _SpatialAudioDefaults.coneInnerAngle;\n        this.coneOuterAngle = options.spatialConeOuterAngle ?? _SpatialAudioDefaults.coneOuterAngle;\n        this.coneOuterVolume = options.spatialConeOuterVolume ?? _SpatialAudioDefaults.coneOuterVolume;\n        this.distanceModel = options.spatialDistanceModel ?? _SpatialAudioDefaults.distanceModel;\n        this.maxDistance = options.spatialMaxDistance ?? _SpatialAudioDefaults.maxDistance;\n        this.panningModel = options.spatialPanningModel ?? _SpatialAudioDefaults.panningModel;\n        this.referenceDistance = options.spatialReferenceDistance ?? _SpatialAudioDefaults.referenceDistance;\n        this.rolloffFactor = options.spatialRolloffFactor ?? _SpatialAudioDefaults.rolloffFactor;\n\n        if (options.spatialPosition !== undefined) {\n            this.position = options.spatialPosition.clone();\n        }\n\n        if (options.spatialRotationQuaternion !== undefined) {\n            this.rotationQuaternion = options.spatialRotationQuaternion.clone();\n        } else if (options.spatialRotation !== undefined) {\n            this.rotation = options.spatialRotation.clone();\n        } else {\n            this.rotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n        }\n    }\n}\n\n/** @internal */\nexport function _GetSpatialAudioSubNode(subGraph: _AbstractAudioSubGraph): Nullable<_SpatialAudioSubNode> {\n    return subGraph.getSubNode<_SpatialAudioSubNode>(AudioSubNode.SPATIAL);\n}\n\n/** @internal */\nexport function _GetSpatialAudioProperty<K extends keyof typeof _SpatialAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K): (typeof _SpatialAudioDefaults)[K] {\n    return _GetSpatialAudioSubNode(subGraph)?.[property] ?? _SpatialAudioDefaults[property];\n}\n\n/** @internal */\nexport function _SetSpatialAudioProperty<K extends keyof typeof _SpatialAudioDefaults>(subGraph: _AbstractAudioSubGraph, property: K, value: _SpatialAudioSubNode[K]): void {\n    subGraph.callOnSubNode<_SpatialAudioSubNode>(AudioSubNode.SPATIAL, (node) => {\n        node[property] = value;\n    });\n}\n", "import { Matrix, Quaternion, Vector3 } from \"../../../Maths/math.vector\";\r\nimport { _SpatialAudioSubNode } from \"../../abstractAudio/subNodes/spatialAudioSubNode\";\r\nimport { _SpatialAudioDefaults } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\r\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\r\nimport type { IWebAudioInNode } from \"../webAudioNode\";\r\n\r\nconst TmpMatrix = Matrix.Zero();\r\nconst TmpVector = Vector3.Zero();\r\n\r\nfunction d2r(degrees: number): number {\r\n    return (degrees * Math.PI) / 180;\r\n}\r\n\r\nfunction r2d(radians: number): number {\r\n    return (radians * 180) / Math.PI;\r\n}\r\n\r\n/** @internal */\r\nexport async function _CreateSpatialAudioSubNodeAsync(engine: _WebAudioEngine): Promise<_SpatialAudioSubNode> {\r\n    return new _SpatialWebAudioSubNode(engine);\r\n}\r\n\r\n/** @internal */\r\nexport class _SpatialWebAudioSubNode extends _SpatialAudioSubNode {\r\n    private _position = _SpatialAudioDefaults.position.clone();\r\n    private _rotation: Vector3 = _SpatialAudioDefaults.rotation.clone();\r\n    private _rotationQuaternion: Quaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\r\n    private _webAudioRotationQuaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\r\n\r\n    /** @internal */\r\n    public readonly node: PannerNode;\r\n\r\n    /** @internal */\r\n    public constructor(engine: _WebAudioEngine) {\r\n        super(engine);\r\n\r\n        this.node = new PannerNode(engine.audioContext);\r\n    }\r\n\r\n    /** @internal */\r\n    public get coneInnerAngle(): number {\r\n        return d2r(this.node.coneInnerAngle);\r\n    }\r\n\r\n    public set coneInnerAngle(value: number) {\r\n        this.node.coneInnerAngle = r2d(value);\r\n    }\r\n\r\n    /** @internal */\r\n    public get coneOuterAngle(): number {\r\n        return d2r(this.node.coneOuterAngle);\r\n    }\r\n\r\n    public set coneOuterAngle(value: number) {\r\n        this.node.coneOuterAngle = r2d(value);\r\n    }\r\n\r\n    /** @internal */\r\n    public get coneOuterVolume(): number {\r\n        return this.node.coneOuterGain;\r\n    }\r\n\r\n    public set coneOuterVolume(value: number) {\r\n        this.node.coneOuterGain = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get distanceModel(): \"linear\" | \"inverse\" | \"exponential\" {\r\n        return this.node.distanceModel;\r\n    }\r\n\r\n    public set distanceModel(value: \"linear\" | \"inverse\" | \"exponential\") {\r\n        this.node.distanceModel = value;\r\n\r\n        // Wiggle the max distance to make the change take effect.\r\n        const maxDistance = this.node.maxDistance;\r\n        this.node.maxDistance = maxDistance + 0.001;\r\n        this.node.maxDistance = maxDistance;\r\n    }\r\n\r\n    /** @internal */\r\n    public get maxDistance(): number {\r\n        return this.node.maxDistance;\r\n    }\r\n\r\n    public set maxDistance(value: number) {\r\n        this.node.maxDistance = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get panningModel(): \"equalpower\" | \"HRTF\" {\r\n        return this.node.panningModel;\r\n    }\r\n\r\n    public set panningModel(value: \"equalpower\" | \"HRTF\") {\r\n        this.node.panningModel = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        this._position.copyFrom(value);\r\n\r\n        this.node.positionX.value = value.x;\r\n        this.node.positionY.value = value.y;\r\n        this.node.positionZ.value = value.z;\r\n    }\r\n\r\n    /** @internal */\r\n    public get referenceDistance(): number {\r\n        return this.node.refDistance;\r\n    }\r\n\r\n    public set referenceDistance(value: number) {\r\n        this.node.refDistance = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get rolloffFactor(): number {\r\n        return this.node.rolloffFactor;\r\n    }\r\n\r\n    public set rolloffFactor(value: number) {\r\n        this.node.rolloffFactor = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public get rotation(): Vector3 {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: Vector3) {\r\n        this._rotation.copyFrom(value);\r\n        Quaternion.FromEulerAnglesToRef(value.x, value.y, value.z, this._webAudioRotationQuaternion);\r\n        this._updateRotation();\r\n    }\r\n\r\n    /** @internal */\r\n    public get rotationQuaternion(): Quaternion {\r\n        return this._rotationQuaternion;\r\n    }\r\n\r\n    public set rotationQuaternion(value: Quaternion) {\r\n        this._rotationQuaternion.copyFrom(value);\r\n        this._webAudioRotationQuaternion.copyFrom(value);\r\n        this._updateRotation();\r\n    }\r\n\r\n    /** @internal */\r\n    public get inNode(): AudioNode {\r\n        return this.node;\r\n    }\r\n\r\n    /** @internal */\r\n    public get outNode(): AudioNode {\r\n        return this.node;\r\n    }\r\n\r\n    protected override _connect(node: IWebAudioInNode): boolean {\r\n        const connected = super._connect(node);\r\n\r\n        if (!connected) {\r\n            return false;\r\n        }\r\n\r\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\r\n        if (node.inNode) {\r\n            this.node.connect(node.inNode);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected override _disconnect(node: IWebAudioInNode): boolean {\r\n        const disconnected = super._disconnect(node);\r\n\r\n        if (!disconnected) {\r\n            return false;\r\n        }\r\n\r\n        if (node.inNode) {\r\n            this.node.disconnect(node.inNode);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public getClassName(): string {\r\n        return \"_SpatialWebAudioSubNode\";\r\n    }\r\n\r\n    private _updateRotation(): void {\r\n        Matrix.FromQuaternionToRef(this._webAudioRotationQuaternion, TmpMatrix);\r\n        Vector3.TransformNormalToRef(Vector3.Right(), TmpMatrix, TmpVector);\r\n\r\n        this.node.orientationX.value = TmpVector.x;\r\n        this.node.orientationY.value = TmpVector.y;\r\n        this.node.orientationZ.value = TmpVector.z;\r\n    }\r\n}\r\n", "import { _StereoAudioSubNode } from \"../../abstractAudio/subNodes/stereoAudioSubNode\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\nimport type { IWebAudioInNode } from \"../webAudioNode\";\n\n/** @internal */\nexport async function _CreateStereoAudioSubNodeAsync(engine: _WebAudioEngine): Promise<_StereoAudioSubNode> {\n    return new _StereoWebAudioSubNode(engine);\n}\n\n/** @internal */\nexport class _StereoWebAudioSubNode extends _StereoAudioSubNode {\n    /** @internal */\n    public readonly node: StereoPannerNode;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine) {\n        super(engine);\n\n        this.node = new StereoPannerNode(engine.audioContext);\n    }\n\n    /** @internal */\n    public get pan(): number {\n        return this.node.pan.value;\n    }\n\n    /** @internal */\n    public set pan(value: number) {\n        this.node.pan.value = value;\n    }\n\n    /** @internal */\n    public get inNode(): AudioNode {\n        return this.node;\n    }\n\n    /** @internal */\n    public get outNode(): AudioNode {\n        return this.node;\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_StereoWebAudioSubNode\";\n    }\n\n    protected override _connect(node: IWebAudioInNode): boolean {\n        const connected = super._connect(node);\n\n        if (!connected) {\n            return false;\n        }\n\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node.inNode) {\n            this.node.connect(node.inNode);\n        }\n\n        return true;\n    }\n\n    protected override _disconnect(node: IWebAudioInNode): boolean {\n        const disconnected = super._disconnect(node);\n\n        if (!disconnected) {\n            return false;\n        }\n\n        if (node.inNode) {\n            this.node.disconnect(node.inNode);\n        }\n\n        return true;\n    }\n}\n", "import type { Nullable } from \"../../../types\";\nimport type { AbstractAudioNode } from \"../../abstractAudio/abstractAudioNode\";\nimport type { _AbstractAudioSubNode } from \"../../abstractAudio/subNodes/abstractAudioSubNode\";\nimport { AudioSubNode } from \"../../abstractAudio/subNodes/audioSubNode\";\nimport { _GetSpatialAudioSubNode } from \"../../abstractAudio/subNodes/spatialAudioSubNode\";\nimport { _GetStereoAudioSubNode } from \"../../abstractAudio/subNodes/stereoAudioSubNode\";\nimport type { IVolumeAudioOptions } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport { _GetVolumeAudioSubNode } from \"../../abstractAudio/subNodes/volumeAudioSubNode\";\nimport type { ISpatialAudioOptions } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\nimport { _HasSpatialAudioOptions } from \"../../abstractAudio/subProperties/abstractSpatialAudio\";\nimport type { IStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport { _HasStereoAudioOptions } from \"../../abstractAudio/subProperties/abstractStereoAudio\";\nimport type { IWebAudioOutNode, IWebAudioSubNode } from \"../webAudioNode\";\nimport type { _SpatialWebAudioSubNode } from \"./spatialWebAudioSubNode\";\nimport { _CreateSpatialAudioSubNodeAsync } from \"./spatialWebAudioSubNode\";\nimport type { _StereoWebAudioSubNode } from \"./stereoWebAudioSubNode\";\nimport { _CreateStereoAudioSubNodeAsync } from \"./stereoWebAudioSubNode\";\nimport type { _VolumeWebAudioSubNode } from \"./volumeWebAudioSubNode\";\nimport { _WebAudioBaseSubGraph } from \"./webAudioBaseSubGraph\";\n\n/** @internal */\nexport interface IWebAudioBusAndSoundSubGraphOptions extends ISpatialAudioOptions, IStereoAudioOptions, IVolumeAudioOptions {}\n\n/** @internal */\nexport abstract class _WebAudioBusAndSoundSubGraph extends _WebAudioBaseSubGraph {\n    protected abstract readonly _upstreamNodes: Nullable<Set<AbstractAudioNode>>;\n\n    protected _inNode: Nullable<AudioNode> = null;\n\n    /** @internal */\n    public override async init(options: Partial<IWebAudioBusAndSoundSubGraphOptions>): Promise<void> {\n        super.init(options);\n\n        let hasSpatialOptions = false;\n        let hasStereoOptions = false;\n\n        if ((hasSpatialOptions = _HasSpatialAudioOptions(options))) {\n            this._createAndAddSubNode(AudioSubNode.SPATIAL);\n        }\n        if ((hasStereoOptions = _HasStereoAudioOptions(options))) {\n            this._createAndAddSubNode(AudioSubNode.STEREO);\n        }\n\n        await this._createSubNodePromisesResolved();\n\n        if (hasSpatialOptions) {\n            _GetSpatialAudioSubNode(this)?.setOptions(options);\n        }\n        if (hasStereoOptions) {\n            _GetStereoAudioSubNode(this)?.setOptions(options);\n        }\n    }\n\n    /** @internal */\n    public override get inNode(): Nullable<AudioNode> {\n        return this._inNode;\n    }\n\n    protected override _createSubNode(name: string): Nullable<Promise<_AbstractAudioSubNode>> {\n        const node = super._createSubNode(name);\n\n        if (node) {\n            return node;\n        }\n\n        switch (name) {\n            case AudioSubNode.SPATIAL:\n                return _CreateSpatialAudioSubNodeAsync(this._owner.engine);\n            case AudioSubNode.STEREO:\n                return _CreateStereoAudioSubNodeAsync(this._owner.engine);\n            default:\n                return null;\n        }\n    }\n\n    protected override _onSubNodesChanged(): void {\n        const spatialNode = _GetSpatialAudioSubNode(this);\n        const stereoNode = _GetStereoAudioSubNode(this);\n        const volumeNode = _GetVolumeAudioSubNode(this);\n\n        if (spatialNode && spatialNode.getClassName() !== \"_SpatialWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (stereoNode && stereoNode.getClassName() !== \"_StereoWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n        if (volumeNode && volumeNode.getClassName() !== \"_VolumeWebAudioSubNode\") {\n            throw new Error(\"Not a WebAudio subnode.\");\n        }\n\n        if (spatialNode) {\n            spatialNode.disconnectAll();\n\n            if (stereoNode) {\n                spatialNode.connect(stereoNode);\n            } else if (volumeNode) {\n                spatialNode.connect(volumeNode);\n            }\n        }\n\n        if (stereoNode) {\n            stereoNode.disconnectAll();\n\n            if (volumeNode) {\n                stereoNode.connect(volumeNode);\n            }\n        }\n\n        let inSubNode: Nullable<IWebAudioSubNode> = null;\n\n        if (spatialNode) {\n            inSubNode = spatialNode as _SpatialWebAudioSubNode;\n        } else if (stereoNode) {\n            inSubNode = stereoNode as _StereoWebAudioSubNode;\n        } else if (volumeNode) {\n            inSubNode = volumeNode as _VolumeWebAudioSubNode;\n        }\n\n        const inNode = inSubNode?.node ?? null;\n\n        if (this._inNode !== inNode) {\n            // Disconnect the wrapped upstream WebAudio nodes from the old wrapped WebAudio node.\n            // The wrapper nodes are unaware of this change.\n            if (this._inNode && this._upstreamNodes) {\n                const it = this._upstreamNodes.values();\n                for (let next = it.next(); !next.done; next = it.next()) {\n                    (next.value as IWebAudioOutNode).outNode?.disconnect(this._inNode);\n                }\n            }\n\n            this._inNode = inNode;\n\n            // Connect the wrapped upstream WebAudio nodes to the new wrapped WebAudio node.\n            // The wrapper nodes are unaware of this change.\n            if (inNode && this._upstreamNodes) {\n                const it = this._upstreamNodes.values();\n                for (let next = it.next(); !next.done; next = it.next()) {\n                    (next.value as IWebAudioOutNode).outNode?.connect(inNode);\n                }\n            }\n        }\n    }\n}\n", "import type { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Nullable } from \"../../../types\";\nimport type { _AbstractAudioSubGraph } from \"../subNodes/abstractAudioSubGraph\";\nimport { _GetSpatialAudioProperty, _GetSpatialAudioSubNode, _SetSpatialAudioProperty, type _SpatialAudioSubNode } from \"../subNodes/spatialAudioSubNode\";\nimport { _SpatialAudioDefaults, AbstractSpatialAudio } from \"./abstractSpatialAudio\";\n\n/** @internal */\nexport class _SpatialAudio extends AbstractSpatialAudio {\n    private _position: Vector3 = _SpatialAudioDefaults.position.clone();\n    private _rotation: Vector3 = _SpatialAudioDefaults.rotation.clone();\n    private _rotationQuaternion: Quaternion = _SpatialAudioDefaults.rotationQuaternion.clone();\n    private _subGraph: _AbstractAudioSubGraph;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph) {\n        super();\n        this._subGraph = subGraph;\n    }\n\n    /** @internal */\n    public get coneInnerAngle(): number {\n        return _GetSpatialAudioProperty(this._subGraph, \"coneInnerAngle\") ?? _SpatialAudioDefaults.coneInnerAngle;\n    }\n\n    public set coneInnerAngle(value: number) {\n        _SetSpatialAudioProperty(this._subGraph, \"coneInnerAngle\", value);\n    }\n\n    /** @internal */\n    public get coneOuterAngle(): number {\n        return _GetSpatialAudioProperty(this._subGraph, \"coneOuterAngle\") ?? _SpatialAudioDefaults.coneOuterAngle;\n    }\n\n    public set coneOuterAngle(value: number) {\n        _SetSpatialAudioProperty(this._subGraph, \"coneOuterAngle\", value);\n    }\n\n    /** @internal */\n    public get coneOuterVolume(): number {\n        return _GetSpatialAudioProperty(this._subGraph, \"coneOuterVolume\") ?? _SpatialAudioDefaults.coneOuterVolume;\n    }\n\n    public set coneOuterVolume(value: number) {\n        _SetSpatialAudioProperty(this._subGraph, \"coneOuterVolume\", value);\n    }\n\n    /** @internal */\n    public get distanceModel(): DistanceModelType {\n        return _GetSpatialAudioProperty(this._subGraph, \"distanceModel\") ?? _SpatialAudioDefaults.distanceModel;\n    }\n\n    public set distanceModel(value: DistanceModelType) {\n        _SetSpatialAudioProperty(this._subGraph, \"distanceModel\", value);\n    }\n\n    /** @internal */\n    public get maxDistance(): number {\n        return _GetSpatialAudioProperty(this._subGraph, \"maxDistance\") ?? _SpatialAudioDefaults.maxDistance;\n    }\n\n    public set maxDistance(value: number) {\n        if (value <= 0) {\n            value = 0.000001;\n        }\n\n        _SetSpatialAudioProperty(this._subGraph, \"maxDistance\", value);\n    }\n\n    /** @internal */\n    public get panningModel(): PanningModelType {\n        return _GetSpatialAudioProperty(this._subGraph, \"panningModel\") ?? _SpatialAudioDefaults.panningModel;\n    }\n\n    public set panningModel(value: PanningModelType) {\n        _SetSpatialAudioProperty(this._subGraph, \"panningModel\", value);\n    }\n\n    /** @internal */\n    public get position(): Vector3 {\n        return this._position;\n    }\n\n    public set position(value: Vector3) {\n        this._position = value;\n        this._updatePosition();\n    }\n\n    /** @internal */\n    public get referenceDistance(): number {\n        return _GetSpatialAudioProperty(this._subGraph, \"referenceDistance\") ?? _SpatialAudioDefaults.referenceDistance;\n    }\n\n    public set referenceDistance(value: number) {\n        _SetSpatialAudioProperty(this._subGraph, \"referenceDistance\", value);\n    }\n\n    /** @internal */\n    public get rolloffFactor(): number {\n        return _GetSpatialAudioProperty(this._subGraph, \"rolloffFactor\") ?? _SpatialAudioDefaults.rolloffFactor;\n    }\n\n    public set rolloffFactor(value: number) {\n        _SetSpatialAudioProperty(this._subGraph, \"rolloffFactor\", value);\n    }\n\n    /** @internal */\n    public get rotation(): Vector3 {\n        return this._rotation;\n    }\n\n    public set rotation(value: Vector3) {\n        this._rotation = value;\n        this._updateRotation();\n    }\n\n    /** @internal */\n    public get rotationQuaternion(): Quaternion {\n        return this._rotationQuaternion;\n    }\n\n    public set rotationQuaternion(value: Quaternion) {\n        this._rotationQuaternion = value;\n        this._updateRotation();\n    }\n\n    /** @internal */\n    public update(): void {\n        const subNode = _GetSpatialAudioSubNode(this._subGraph);\n\n        this._updatePosition(subNode);\n        this._updateRotation(subNode);\n    }\n\n    private _updatePosition(subNode: Nullable<_SpatialAudioSubNode> = null): void {\n        if (!subNode) {\n            subNode = _GetSpatialAudioSubNode(this._subGraph);\n\n            if (!subNode) {\n                return;\n            }\n        }\n\n        const position = subNode.position;\n        if (!position.equalsWithEpsilon(this._position)) {\n            subNode.position = this._position;\n        }\n    }\n\n    private _updateRotation(subNode: Nullable<_SpatialAudioSubNode> = null): void {\n        if (!subNode) {\n            subNode = _GetSpatialAudioSubNode(this._subGraph);\n\n            if (!subNode) {\n                return;\n            }\n        }\n\n        if (!subNode.rotationQuaternion.equalsWithEpsilon(this._rotationQuaternion)) {\n            subNode.rotationQuaternion = this._rotationQuaternion;\n        } else if (!subNode.rotation.equalsWithEpsilon(this._rotation)) {\n            subNode.rotation = this._rotation;\n        }\n    }\n}\n", "import type { _AbstractAudioSubGraph } from \"../../abstractAudio/subNodes/abstractAudioSubGraph\";\nimport { _SpatialAudio } from \"../../abstractAudio/subProperties/spatialAudio\";\n\n/** @internal */\nexport class _SpatialWebAudio extends _SpatialAudio {\n    private _autoUpdate = false;\n\n    /** @internal */\n    public constructor(subGraph: _AbstractAudioSubGraph, autoUpdate: boolean) {\n        super(subGraph);\n\n        if (!autoUpdate) {\n            return;\n        }\n\n        this._autoUpdate = true;\n\n        const update = () => {\n            if (!this._autoUpdate) {\n                return;\n            }\n\n            this.update();\n            requestAnimationFrame(update);\n        };\n\n        requestAnimationFrame(update);\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._autoUpdate = false;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AA8GM,SAAU,wBAAwB,SAAsC;AAC1E,SACI,QAAQ,kBACR,QAAQ,sBAAsB,UAC9B,QAAQ,0BAA0B,UAClC,QAAQ,0BAA0B,UAClC,QAAQ,2BAA2B,UACnC,QAAQ,yBAAyB,UACjC,QAAQ,uBAAuB,UAC/B,QAAQ,wBAAwB,UAChC,QAAQ,oBAAoB,UAC5B,QAAQ,6BAA6B,UACrC,QAAQ,yBAAyB,UACjC,QAAQ,oBAAoB,UAC5B,QAAQ,8BAA8B;AAE9C;AA9HA,IAEa,uBAmIS;AArItB;;;AAEO,IAAM,wBAAwB;MACjC,gBAAgB;MAChB,gBAAgB;MAChB,iBAAiB;MACjB,eAAe;MACf,aAAa;MACb,cAAc;MACd,UAAU,QAAQ,KAAI;MACtB,mBAAmB;MACnB,eAAe;MACf,UAAU,QAAQ,KAAI;MACtB,oBAAoB,IAAI,WAAU;;AAwHhC,IAAgB,uBAAhB,MAAoC;;;;;;ACzGpC,SAAU,uBAAuB,SAAqC;AACxE,SAAO,QAAQ,iBAAiB,QAAQ,cAAc;AAC1D;AA9BA,IAAa,sBAqCS;AArCtB;;AAAO,IAAM,uBAAuB;MAChC,KAAK;;AAoCH,IAAgB,sBAAhB,MAAmC;;;;;;ACdnC,SAAU,uBAAuB,UAAgC;AACnE,SAAO,SAAS;IAAU;;EAAA;AAC9B;AAGM,SAAU,wBAAqE,UAAkC,UAAW;AA1BlI;AA2BI,WAAO,4BAAuB,QAAQ,MAA/B,mBAAmC,cAAa,qBAAqB,QAAQ;AACxF;AAGM,SAAU,wBAAqE,UAAkC,UAAa,OAA6B;AAC7J,WAAS,cAAa,UAA2C,CAAC,SAAQ;AACtE,SAAK,QAAQ,IAAI;EACrB,CAAC;AACL;AAnCA,IAOsB;AAPtB;;;AAGA;AAIM,IAAgB,sBAAhB,cAA4C,sBAAqB;MACnE,YAAsB,QAAqB;AACvC,cAAK,UAAsB,MAAM;MACrC;;MAKO,WAAW,SAAqC;AACnD,aAAK,MAAM,QAAQ,aAAa,qBAAqB;MACzD;;;;;;ACnBJ,IAKa;AALb;;;AAEA;AAGM,IAAO,eAAP,cAA4B,oBAAmB;;MAIjD,YAAmB,UAAgC;AAC/C,cAAK;AACL,aAAK,YAAY;MACrB;;MAGA,IAAW,MAAG;AACV,eAAO,wBAAwB,KAAK,WAAW,KAAK;MACxD;MAEA,IAAW,IAAI,OAAa;AACxB,gCAAwB,KAAK,WAAW,OAAO,KAAK;MACxD;;;;;;ACiCE,SAAU,wBAAwB,UAAgC;AACpE,SAAO,SAAS;IAAU;;EAAA;AAC9B;AAGM,SAAU,yBAAuE,UAAkC,UAAW;AAvDpI;AAwDI,WAAO,6BAAwB,QAAQ,MAAhC,mBAAoC,cAAa,sBAAsB,QAAQ;AAC1F;AAGM,SAAU,yBAAuE,UAAkC,UAAa,OAA8B;AAChK,WAAS,cAAa,WAA6C,CAAC,SAAQ;AACxE,SAAK,QAAQ,IAAI;EACrB,CAAC;AACL;AAhEA,IAMsB;AANtB;;;AAEA;AAIM,IAAgB,uBAAhB,cAA6C,sBAAqB;MACpE,YAAsB,QAAqB;AACvC,cAAK,WAAuB,MAAM;MACtC;;MAgBO,WAAW,SAAsC;AACpD,aAAK,iBAAiB,QAAQ,yBAAyB,sBAAsB;AAC7E,aAAK,iBAAiB,QAAQ,yBAAyB,sBAAsB;AAC7E,aAAK,kBAAkB,QAAQ,0BAA0B,sBAAsB;AAC/E,aAAK,gBAAgB,QAAQ,wBAAwB,sBAAsB;AAC3E,aAAK,cAAc,QAAQ,sBAAsB,sBAAsB;AACvE,aAAK,eAAe,QAAQ,uBAAuB,sBAAsB;AACzE,aAAK,oBAAoB,QAAQ,4BAA4B,sBAAsB;AACnF,aAAK,gBAAgB,QAAQ,wBAAwB,sBAAsB;AAE3E,YAAI,QAAQ,oBAAoB,QAAW;AACvC,eAAK,WAAW,QAAQ,gBAAgB,MAAK;QACjD;AAEA,YAAI,QAAQ,8BAA8B,QAAW;AACjD,eAAK,qBAAqB,QAAQ,0BAA0B,MAAK;QACrE,WAAW,QAAQ,oBAAoB,QAAW;AAC9C,eAAK,WAAW,QAAQ,gBAAgB,MAAK;QACjD,OAAO;AACH,eAAK,qBAAqB,sBAAsB,mBAAmB,MAAK;QAC5E;MACJ;;;;;;ACzCJ,SAAS,IAAI,SAAe;AACxB,SAAQ,UAAU,KAAK,KAAM;AACjC;AAEA,SAAS,IAAI,SAAe;AACxB,SAAQ,UAAU,MAAO,KAAK;AAClC;AAGA,eAAsB,gCAAgC,QAAuB;AACzE,SAAO,IAAI,wBAAwB,MAAM;AAC7C;AApBA,IAMM,WACA,WAgBO;AAvBb;;;AACA;AACA;AAIA,IAAM,YAAY,OAAO,KAAI;AAC7B,IAAM,YAAY,QAAQ,KAAI;AAgBxB,IAAO,0BAAP,cAAuC,qBAAoB;;MAU7D,YAAmB,QAAuB;AACtC,cAAM,MAAM;AAVR,aAAA,YAAY,sBAAsB,SAAS,MAAK;AAChD,aAAA,YAAqB,sBAAsB,SAAS,MAAK;AACzD,aAAA,sBAAkC,sBAAsB,mBAAmB,MAAK;AAChF,aAAA,8BAA8B,sBAAsB,mBAAmB,MAAK;AAShF,aAAK,OAAO,IAAI,WAAW,OAAO,YAAY;MAClD;;MAGA,IAAW,iBAAc;AACrB,eAAO,IAAI,KAAK,KAAK,cAAc;MACvC;MAEA,IAAW,eAAe,OAAa;AACnC,aAAK,KAAK,iBAAiB,IAAI,KAAK;MACxC;;MAGA,IAAW,iBAAc;AACrB,eAAO,IAAI,KAAK,KAAK,cAAc;MACvC;MAEA,IAAW,eAAe,OAAa;AACnC,aAAK,KAAK,iBAAiB,IAAI,KAAK;MACxC;;MAGA,IAAW,kBAAe;AACtB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,gBAAgB,OAAa;AACpC,aAAK,KAAK,gBAAgB;MAC9B;;MAGA,IAAW,gBAAa;AACpB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,cAAc,OAA2C;AAChE,aAAK,KAAK,gBAAgB;AAG1B,cAAM,cAAc,KAAK,KAAK;AAC9B,aAAK,KAAK,cAAc,cAAc;AACtC,aAAK,KAAK,cAAc;MAC5B;;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,YAAY,OAAa;AAChC,aAAK,KAAK,cAAc;MAC5B;;MAGA,IAAW,eAAY;AACnB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,aAAa,OAA4B;AAChD,aAAK,KAAK,eAAe;MAC7B;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAc;AAC9B,aAAK,UAAU,SAAS,KAAK;AAE7B,aAAK,KAAK,UAAU,QAAQ,MAAM;AAClC,aAAK,KAAK,UAAU,QAAQ,MAAM;AAClC,aAAK,KAAK,UAAU,QAAQ,MAAM;MACtC;;MAGA,IAAW,oBAAiB;AACxB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,kBAAkB,OAAa;AACtC,aAAK,KAAK,cAAc;MAC5B;;MAGA,IAAW,gBAAa;AACpB,eAAO,KAAK,KAAK;MACrB;MAEA,IAAW,cAAc,OAAa;AAClC,aAAK,KAAK,gBAAgB;MAC9B;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAc;AAC9B,aAAK,UAAU,SAAS,KAAK;AAC7B,mBAAW,qBAAqB,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,2BAA2B;AAC3F,aAAK,gBAAe;MACxB;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAiB;AAC3C,aAAK,oBAAoB,SAAS,KAAK;AACvC,aAAK,4BAA4B,SAAS,KAAK;AAC/C,aAAK,gBAAe;MACxB;;MAGA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEmB,SAAS,MAAqB;AAC7C,cAAM,YAAY,MAAM,SAAS,IAAI;AAErC,YAAI,CAAC,WAAW;AACZ,iBAAO;QACX;AAGA,YAAI,KAAK,QAAQ;AACb,eAAK,KAAK,QAAQ,KAAK,MAAM;QACjC;AAEA,eAAO;MACX;MAEmB,YAAY,MAAqB;AAChD,cAAM,eAAe,MAAM,YAAY,IAAI;AAE3C,YAAI,CAAC,cAAc;AACf,iBAAO;QACX;AAEA,YAAI,KAAK,QAAQ;AACb,eAAK,KAAK,WAAW,KAAK,MAAM;QACpC;AAEA,eAAO;MACX;;MAGO,eAAY;AACf,eAAO;MACX;MAEQ,kBAAe;AACnB,eAAO,oBAAoB,KAAK,6BAA6B,SAAS;AACtE,gBAAQ,qBAAqB,QAAQ,MAAK,GAAI,WAAW,SAAS;AAElE,aAAK,KAAK,aAAa,QAAQ,UAAU;AACzC,aAAK,KAAK,aAAa,QAAQ,UAAU;AACzC,aAAK,KAAK,aAAa,QAAQ,UAAU;MAC7C;;;;;;ACrMJ,eAAsB,+BAA+B,QAAuB;AACxE,SAAO,IAAI,uBAAuB,MAAM;AAC5C;AAPA,IAUa;AAVb;;;AAUM,IAAO,yBAAP,cAAsC,oBAAmB;;MAK3D,YAAmB,QAAuB;AACtC,cAAM,MAAM;AAEZ,aAAK,OAAO,IAAI,iBAAiB,OAAO,YAAY;MACxD;;MAGA,IAAW,MAAG;AACV,eAAO,KAAK,KAAK,IAAI;MACzB;;MAGA,IAAW,IAAI,OAAa;AACxB,aAAK,KAAK,IAAI,QAAQ;MAC1B;;MAGA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;;MAGO,eAAY;AACf,eAAO;MACX;MAEmB,SAAS,MAAqB;AAC7C,cAAM,YAAY,MAAM,SAAS,IAAI;AAErC,YAAI,CAAC,WAAW;AACZ,iBAAO;QACX;AAGA,YAAI,KAAK,QAAQ;AACb,eAAK,KAAK,QAAQ,KAAK,MAAM;QACjC;AAEA,eAAO;MACX;MAEmB,YAAY,MAAqB;AAChD,cAAM,eAAe,MAAM,YAAY,IAAI;AAE3C,YAAI,CAAC,cAAc;AACf,iBAAO;QACX;AAEA,YAAI,KAAK,QAAQ;AACb,eAAK,KAAK,WAAW,KAAK,MAAM;QACpC;AAEA,eAAO;MACX;;;;;;ACrEJ,IAoBsB;AApBtB;;;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAMM,IAAgB,+BAAhB,cAAqD,sBAAqB;MAAhF,cAAA;;AAGc,aAAA,UAA+B;MAmH7C;;MAhHoB,MAAM,KAAK,SAAqD;AA1BpF;AA2BQ,cAAM,KAAK,OAAO;AAElB,YAAI,oBAAoB;AACxB,YAAI,mBAAmB;AAEvB,YAAK,oBAAoB,wBAAwB,OAAO,GAAI;AACxD,eAAK;YAAoB;;UAAA;QAC7B;AACA,YAAK,mBAAmB,uBAAuB,OAAO,GAAI;AACtD,eAAK;YAAoB;;UAAA;QAC7B;AAEA,cAAM,KAAK,+BAA8B;AAEzC,YAAI,mBAAmB;AACnB,wCAAwB,IAAI,MAA5B,mBAA+B,WAAW;QAC9C;AACA,YAAI,kBAAkB;AAClB,uCAAuB,IAAI,MAA3B,mBAA8B,WAAW;QAC7C;MACJ;;MAGA,IAAoB,SAAM;AACtB,eAAO,KAAK;MAChB;MAEmB,eAAe,MAAY;AAC1C,cAAM,OAAO,MAAM,eAAe,IAAI;AAEtC,YAAI,MAAM;AACN,iBAAO;QACX;AAEA,gBAAQ,MAAM;UACV,KAAA;AACI,mBAAO,gCAAgC,KAAK,OAAO,MAAM;UAC7D,KAAA;AACI,mBAAO,+BAA+B,KAAK,OAAO,MAAM;UAC5D;AACI,mBAAO;QACf;MACJ;MAEmB,qBAAkB;AAvEzC;AAwEQ,cAAM,cAAc,wBAAwB,IAAI;AAChD,cAAM,aAAa,uBAAuB,IAAI;AAC9C,cAAM,aAAa,uBAAuB,IAAI;AAE9C,YAAI,eAAe,YAAY,aAAY,MAAO,2BAA2B;AACzE,gBAAM,IAAI,MAAM,yBAAyB;QAC7C;AACA,YAAI,cAAc,WAAW,aAAY,MAAO,0BAA0B;AACtE,gBAAM,IAAI,MAAM,yBAAyB;QAC7C;AACA,YAAI,cAAc,WAAW,aAAY,MAAO,0BAA0B;AACtE,gBAAM,IAAI,MAAM,yBAAyB;QAC7C;AAEA,YAAI,aAAa;AACb,sBAAY,cAAa;AAEzB,cAAI,YAAY;AACZ,wBAAY,QAAQ,UAAU;UAClC,WAAW,YAAY;AACnB,wBAAY,QAAQ,UAAU;UAClC;QACJ;AAEA,YAAI,YAAY;AACZ,qBAAW,cAAa;AAExB,cAAI,YAAY;AACZ,uBAAW,QAAQ,UAAU;UACjC;QACJ;AAEA,YAAI,YAAwC;AAE5C,YAAI,aAAa;AACb,sBAAY;QAChB,WAAW,YAAY;AACnB,sBAAY;QAChB,WAAW,YAAY;AACnB,sBAAY;QAChB;AAEA,cAAM,UAAS,uCAAW,SAAQ;AAElC,YAAI,KAAK,YAAY,QAAQ;AAGzB,cAAI,KAAK,WAAW,KAAK,gBAAgB;AACrC,kBAAM,KAAK,KAAK,eAAe,OAAM;AACrC,qBAAS,OAAO,GAAG,KAAI,GAAI,CAAC,KAAK,MAAM,OAAO,GAAG,KAAI,GAAI;AACpD,yBAAK,MAA2B,YAAhC,mBAAyC,WAAW,KAAK;YAC9D;UACJ;AAEA,eAAK,UAAU;AAIf,cAAI,UAAU,KAAK,gBAAgB;AAC/B,kBAAM,KAAK,KAAK,eAAe,OAAM;AACrC,qBAAS,OAAO,GAAG,KAAI,GAAI,CAAC,KAAK,MAAM,OAAO,GAAG,KAAI,GAAI;AACpD,yBAAK,MAA2B,YAAhC,mBAAyC,QAAQ;YACtD;UACJ;QACJ;MACJ;;;;;;AC1IJ,IAIa;AAJb;;;AACA;AAGM,IAAO,gBAAP,cAA6B,qBAAoB;;MAOnD,YAAmB,UAAgC;AAC/C,cAAK;AAPD,aAAA,YAAqB,sBAAsB,SAAS,MAAK;AACzD,aAAA,YAAqB,sBAAsB,SAAS,MAAK;AACzD,aAAA,sBAAkC,sBAAsB,mBAAmB,MAAK;AAMpF,aAAK,YAAY;MACrB;;MAGA,IAAW,iBAAc;AACrB,eAAO,yBAAyB,KAAK,WAAW,gBAAgB,KAAK,sBAAsB;MAC/F;MAEA,IAAW,eAAe,OAAa;AACnC,iCAAyB,KAAK,WAAW,kBAAkB,KAAK;MACpE;;MAGA,IAAW,iBAAc;AACrB,eAAO,yBAAyB,KAAK,WAAW,gBAAgB,KAAK,sBAAsB;MAC/F;MAEA,IAAW,eAAe,OAAa;AACnC,iCAAyB,KAAK,WAAW,kBAAkB,KAAK;MACpE;;MAGA,IAAW,kBAAe;AACtB,eAAO,yBAAyB,KAAK,WAAW,iBAAiB,KAAK,sBAAsB;MAChG;MAEA,IAAW,gBAAgB,OAAa;AACpC,iCAAyB,KAAK,WAAW,mBAAmB,KAAK;MACrE;;MAGA,IAAW,gBAAa;AACpB,eAAO,yBAAyB,KAAK,WAAW,eAAe,KAAK,sBAAsB;MAC9F;MAEA,IAAW,cAAc,OAAwB;AAC7C,iCAAyB,KAAK,WAAW,iBAAiB,KAAK;MACnE;;MAGA,IAAW,cAAW;AAClB,eAAO,yBAAyB,KAAK,WAAW,aAAa,KAAK,sBAAsB;MAC5F;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,SAAS,GAAG;AACZ,kBAAQ;QACZ;AAEA,iCAAyB,KAAK,WAAW,eAAe,KAAK;MACjE;;MAGA,IAAW,eAAY;AACnB,eAAO,yBAAyB,KAAK,WAAW,cAAc,KAAK,sBAAsB;MAC7F;MAEA,IAAW,aAAa,OAAuB;AAC3C,iCAAyB,KAAK,WAAW,gBAAgB,KAAK;MAClE;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAc;AAC9B,aAAK,YAAY;AACjB,aAAK,gBAAe;MACxB;;MAGA,IAAW,oBAAiB;AACxB,eAAO,yBAAyB,KAAK,WAAW,mBAAmB,KAAK,sBAAsB;MAClG;MAEA,IAAW,kBAAkB,OAAa;AACtC,iCAAyB,KAAK,WAAW,qBAAqB,KAAK;MACvE;;MAGA,IAAW,gBAAa;AACpB,eAAO,yBAAyB,KAAK,WAAW,eAAe,KAAK,sBAAsB;MAC9F;MAEA,IAAW,cAAc,OAAa;AAClC,iCAAyB,KAAK,WAAW,iBAAiB,KAAK;MACnE;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAc;AAC9B,aAAK,YAAY;AACjB,aAAK,gBAAe;MACxB;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAiB;AAC3C,aAAK,sBAAsB;AAC3B,aAAK,gBAAe;MACxB;;MAGO,SAAM;AACT,cAAM,UAAU,wBAAwB,KAAK,SAAS;AAEtD,aAAK,gBAAgB,OAAO;AAC5B,aAAK,gBAAgB,OAAO;MAChC;MAEQ,gBAAgB,UAA0C,MAAI;AAClE,YAAI,CAAC,SAAS;AACV,oBAAU,wBAAwB,KAAK,SAAS;AAEhD,cAAI,CAAC,SAAS;AACV;UACJ;QACJ;AAEA,cAAM,WAAW,QAAQ;AACzB,YAAI,CAAC,SAAS,kBAAkB,KAAK,SAAS,GAAG;AAC7C,kBAAQ,WAAW,KAAK;QAC5B;MACJ;MAEQ,gBAAgB,UAA0C,MAAI;AAClE,YAAI,CAAC,SAAS;AACV,oBAAU,wBAAwB,KAAK,SAAS;AAEhD,cAAI,CAAC,SAAS;AACV;UACJ;QACJ;AAEA,YAAI,CAAC,QAAQ,mBAAmB,kBAAkB,KAAK,mBAAmB,GAAG;AACzE,kBAAQ,qBAAqB,KAAK;QACtC,WAAW,CAAC,QAAQ,SAAS,kBAAkB,KAAK,SAAS,GAAG;AAC5D,kBAAQ,WAAW,KAAK;QAC5B;MACJ;;;;;;ACjKJ,IAGa;AAHb;;;AAGM,IAAO,mBAAP,cAAgC,cAAa;;MAI/C,YAAmB,UAAkC,YAAmB;AACpE,cAAM,QAAQ;AAJV,aAAA,cAAc;AAMlB,YAAI,CAAC,YAAY;AACb;QACJ;AAEA,aAAK,cAAc;AAEnB,cAAM,SAAS,MAAK;AAChB,cAAI,CAAC,KAAK,aAAa;AACnB;UACJ;AAEA,eAAK,OAAM;AACX,gCAAsB,MAAM;QAChC;AAEA,8BAAsB,MAAM;MAChC;;MAGO,UAAO;AACV,aAAK,cAAc;MACvB;;;;",
  "names": []
}
