import {
  init_vertexColorMixing
} from "./chunk-RSJTFPAQ.js";
import {
  init_instancesDeclaration
} from "./chunk-MKBKOF6C.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-U73FLLBC.js";
import {
  init_instancesVertex
} from "./chunk-GSF5L374.js";
import {
  init_bonesVertex
} from "./chunk-XX4LGSX3.js";
import {
  init_bonesDeclaration
} from "./chunk-MXPRHMVQ.js";
import {
  init_fogVertex
} from "./chunk-KU7GFHLL.js";
import {
  init_fogVertexDeclaration
} from "./chunk-GPFNF4PZ.js";
import {
  init_clipPlaneVertex
} from "./chunk-GMFP5EWC.js";
import {
  init_clipPlaneVertexDeclaration
} from "./chunk-CA76Y3MP.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/ShadersWGSL/color.vertex.js
var name, shader, colorVertexShaderWGSL;
var init_color_vertex = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/color.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_clipPlaneVertexDeclaration();
    init_fogVertexDeclaration();
    init_instancesDeclaration();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    init_clipPlaneVertex();
    init_fogVertex();
    init_vertexColorMixing();
    name = "colorVertexShader";
    shader = `attribute position: vec3f;
#ifdef VERTEXCOLOR
attribute color: vec4f;
#endif
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<clipPlaneVertexDeclaration>
#include<fogVertexDeclaration>
#ifdef FOG
uniform view: mat4x4f;
#endif
#include<instancesDeclaration>
uniform viewProjection: mat4x4f;
#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)
varying vColor: vec4f;
#endif
#define CUSTOM_VERTEX_DEFINITIONS
@vertex
fn main(input : VertexInputs)->FragmentInputs {
#define CUSTOM_VERTEX_MAIN_BEGIN
#ifdef VERTEXCOLOR
var colorUpdated: vec4f=vertexInputs.color;
#endif
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
var worldPos: vec4f=finalWorld* vec4f(input.position,1.0);vertexOutputs.position=uniforms.viewProjection*worldPos;
#include<clipPlaneVertex>
#include<fogVertex>
#include<vertexColorMixing>
#define CUSTOM_VERTEX_MAIN_END
}`;
    ShaderStore.ShadersStoreWGSL[name] = shader;
    colorVertexShaderWGSL = { name, shader };
  }
});

export {
  colorVertexShaderWGSL,
  init_color_vertex
};
//# sourceMappingURL=chunk-DWKZCBD3.js.map
