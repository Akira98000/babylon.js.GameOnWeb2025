import {
  AbstractAudioBus,
  init_abstractAudioBus
} from "./chunk-AY2Q6TMP.js";
import {
  _SpatialWebAudio,
  _StereoAudio,
  _WebAudioBusAndSoundSubGraph,
  init_spatialWebAudio,
  init_stereoAudio,
  init_webAudioBusAndSoundSubGraph
} from "./chunk-SKVIEVFV.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/AudioV2/abstractAudio/audioBus.js
var AudioBus;
var init_audioBus = __esm({
  "node_modules/@babylonjs/core/AudioV2/abstractAudio/audioBus.js"() {
    init_abstractAudioBus();
    AudioBus = class extends AbstractAudioBus {
      constructor(name, engine, options) {
        super(name, engine);
        this._outBus = null;
        this._spatialAutoUpdate = true;
        this._onOutBusDisposed = () => {
          this.outBus = this.engine.defaultMainBus;
        };
        if (typeof options.spatialAutoUpdate === "boolean") {
          this._spatialAutoUpdate = options.spatialAutoUpdate;
        }
      }
      /**
       * The output bus of the audio bus. Defaults to the audio engine's default main bus.
       */
      get outBus() {
        return this._outBus;
      }
      set outBus(outBus) {
        if (this._outBus === outBus) {
          return;
        }
        if (this._outBus) {
          this._outBus.onDisposeObservable.removeCallback(this._onOutBusDisposed);
          if (!this._disconnect(this._outBus)) {
            throw new Error("Disconnect failed");
          }
        }
        this._outBus = outBus;
        if (this._outBus) {
          this._outBus.onDisposeObservable.add(this._onOutBusDisposed);
          if (!this._connect(this._outBus)) {
            throw new Error("Connect failed");
          }
        }
      }
      /**
       * Releases associated resources.
       */
      dispose() {
        super.dispose();
        this._outBus = null;
      }
    };
  }
});

// node_modules/@babylonjs/core/AudioV2/webAudio/webAudioBus.js
var _WebAudioBus;
var init_webAudioBus = __esm({
  "node_modules/@babylonjs/core/AudioV2/webAudio/webAudioBus.js"() {
    init_audioBus();
    init_stereoAudio();
    init_webAudioBusAndSoundSubGraph();
    init_spatialWebAudio();
    _WebAudioBus = class __WebAudioBus extends AudioBus {
      /** @internal */
      constructor(name, engine, options) {
        super(name, engine, options);
        this._spatial = null;
        this._stereo = null;
        this._subGraph = new __WebAudioBus._SubGraph(this);
        this.audioContext = engine.audioContext;
      }
      /** @internal */
      async init(options) {
        if (options.outBus) {
          this.outBus = options.outBus;
        } else {
          await this.engine.isReadyPromise;
          this.outBus = this.engine.defaultMainBus;
        }
        await this._subGraph.init(options);
        this.engine.addNode(this);
      }
      /** @internal */
      dispose() {
        super.dispose();
        this._spatial = null;
        this._stereo = null;
        this.engine.removeNode(this);
      }
      /** @internal */
      get inNode() {
        return this._subGraph.inNode;
      }
      /** @internal */
      get outNode() {
        return this._subGraph.outNode;
      }
      /** @internal */
      get spatial() {
        return this._spatial ?? (this._spatial = new _SpatialWebAudio(this._subGraph, this._spatialAutoUpdate));
      }
      /** @internal */
      get stereo() {
        return this._stereo ?? (this._stereo = new _StereoAudio(this._subGraph));
      }
      /** @internal */
      getClassName() {
        return "_WebAudioBus";
      }
    };
    _WebAudioBus._SubGraph = class extends _WebAudioBusAndSoundSubGraph {
      get _downstreamNodes() {
        return this._owner._downstreamNodes ?? null;
      }
      get _upstreamNodes() {
        return this._owner._upstreamNodes ?? null;
      }
    };
  }
});

export {
  AudioBus,
  init_audioBus,
  _WebAudioBus,
  init_webAudioBus
};
//# sourceMappingURL=chunk-JKPQH5JA.js.map
