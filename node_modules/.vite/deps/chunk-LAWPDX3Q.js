import {
  init_helperFunctions
} from "./chunk-E7XGMC4A.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/ShadersWGSL/layer.fragment.js
var name, shader, layerPixelShaderWGSL;
var init_layer_fragment = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/layer.fragment.js"() {
    init_shaderStore();
    init_helperFunctions();
    name = "layerPixelShader";
    shader = `varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;uniform color: vec4f;
#include<helperFunctions>
#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {
#define CUSTOM_FRAGMENT_MAIN_BEGIN
var baseColor: vec4f=textureSample(textureSampler,textureSamplerSampler,input.vUV);
#if defined(CONVERT_TO_GAMMA)
baseColor=toGammaSpace(baseColor);
#elif defined(CONVERT_TO_LINEAR)
baseColor=toLinearSpaceVec4(baseColor);
#endif
#ifdef ALPHATEST
if (baseColor.a<0.4) {discard;}
#endif
fragmentOutputs.color=baseColor*uniforms.color;
#define CUSTOM_FRAGMENT_MAIN_END
}`;
    ShaderStore.ShadersStoreWGSL[name] = shader;
    layerPixelShaderWGSL = { name, shader };
  }
});

export {
  layerPixelShaderWGSL,
  init_layer_fragment
};
//# sourceMappingURL=chunk-LAWPDX3Q.js.map
