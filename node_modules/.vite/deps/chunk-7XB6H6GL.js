import {
  init_instancesDeclaration
} from "./chunk-42JLCGHG.js";
import {
  init_instancesVertex
} from "./chunk-AD2BDCGE.js";
import {
  init_logDepthVertex
} from "./chunk-VKA6XF37.js";
import {
  init_logDepthDeclaration
} from "./chunk-Q3NFSGSZ.js";
import {
  init_meshUboDeclaration
} from "./chunk-A2T4TNR2.js";
import {
  init_sceneUboDeclaration
} from "./chunk-UUHH7WJE.js";
import {
  init_clipPlaneVertex
} from "./chunk-PMBT47KA.js";
import {
  init_clipPlaneVertexDeclaration
} from "./chunk-ALCMBW77.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/Shaders/ShadersInclude/lineVertexDeclaration.js
var name, shader;
var init_lineVertexDeclaration = __esm({
  "node_modules/@babylonjs/core/Shaders/ShadersInclude/lineVertexDeclaration.js"() {
    init_shaderStore();
    name = "lineVertexDeclaration";
    shader = `uniform mat4 viewProjection;
#define ADDITIONAL_VERTEX_DECLARATION
`;
    ShaderStore.IncludesShadersStore[name] = shader;
  }
});

// node_modules/@babylonjs/core/Shaders/ShadersInclude/lineUboDeclaration.js
var name2, shader2;
var init_lineUboDeclaration = __esm({
  "node_modules/@babylonjs/core/Shaders/ShadersInclude/lineUboDeclaration.js"() {
    init_shaderStore();
    init_sceneUboDeclaration();
    init_meshUboDeclaration();
    name2 = "lineUboDeclaration";
    shader2 = `layout(std140,column_major) uniform;
#include<sceneUboDeclaration>
#include<meshUboDeclaration>
`;
    ShaderStore.IncludesShadersStore[name2] = shader2;
  }
});

// node_modules/@babylonjs/core/Shaders/line.vertex.js
var name3, shader3, lineVertexShader;
var init_line_vertex = __esm({
  "node_modules/@babylonjs/core/Shaders/line.vertex.js"() {
    init_shaderStore();
    init_lineVertexDeclaration();
    init_lineUboDeclaration();
    init_instancesDeclaration();
    init_clipPlaneVertexDeclaration();
    init_logDepthDeclaration();
    init_instancesVertex();
    init_clipPlaneVertex();
    init_logDepthVertex();
    name3 = "lineVertexShader";
    shader3 = `#include<__decl__lineVertex>
#include<instancesDeclaration>
#include<clipPlaneVertexDeclaration>
attribute vec3 position;attribute vec4 normal;uniform float width;uniform float aspectRatio;
#include<logDepthDeclaration>
#define CUSTOM_VERTEX_DEFINITIONS
void main(void) {
#define CUSTOM_VERTEX_MAIN_BEGIN
#include<instancesVertex>
mat4 worldViewProjection=viewProjection*finalWorld;vec4 viewPosition=worldViewProjection*vec4(position,1.0);vec4 viewPositionNext=worldViewProjection*vec4(normal.xyz,1.0);vec2 currentScreen=viewPosition.xy/viewPosition.w;vec2 nextScreen=viewPositionNext.xy/viewPositionNext.w;currentScreen.x*=aspectRatio;nextScreen.x*=aspectRatio;vec2 dir=normalize(nextScreen-currentScreen);vec2 normalDir=vec2(-dir.y,dir.x);normalDir*=width/2.0;normalDir.x/=aspectRatio;vec4 offset=vec4(normalDir*normal.w,0.0,0.0);gl_Position=viewPosition+offset;
#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)
vec4 worldPos=finalWorld*vec4(position,1.0);
#include<clipPlaneVertex>
#endif
#include<logDepthVertex>
#define CUSTOM_VERTEX_MAIN_END
}`;
    ShaderStore.ShadersStore[name3] = shader3;
    lineVertexShader = { name: name3, shader: shader3 };
  }
});

export {
  lineVertexShader,
  init_line_vertex
};
//# sourceMappingURL=chunk-7XB6H6GL.js.map
