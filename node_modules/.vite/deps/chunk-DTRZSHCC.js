import {
  init_logDepthFragment
} from "./chunk-7HP6UJTL.js";
import {
  init_fogFragment
} from "./chunk-L7GU2SFE.js";
import {
  init_fogFragmentDeclaration
} from "./chunk-J53MWIJE.js";
import {
  init_clipPlaneFragment
} from "./chunk-IEF3OVJG.js";
import {
  init_clipPlaneFragmentDeclaration
} from "./chunk-3DSSARZD.js";
import {
  init_logDepthDeclaration
} from "./chunk-Q3NFSGSZ.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/Shaders/ShadersInclude/gaussianSplattingFragmentDeclaration.js
var name, shader;
var init_gaussianSplattingFragmentDeclaration = __esm({
  "node_modules/@babylonjs/core/Shaders/ShadersInclude/gaussianSplattingFragmentDeclaration.js"() {
    init_shaderStore();
    init_logDepthFragment();
    init_fogFragment();
    name = "gaussianSplattingFragmentDeclaration";
    shader = `vec4 gaussianColor(vec4 inColor)
{float A=-dot(vPosition,vPosition);if (A<-4.0) discard;float B=exp(A)*inColor.a;
#include<logDepthFragment>
vec3 color=inColor.rgb;
#ifdef FOG
#include<fogFragment>
#endif
return vec4(color,B);}
`;
    ShaderStore.IncludesShadersStore[name] = shader;
  }
});

// node_modules/@babylonjs/core/Shaders/gaussianSplatting.fragment.js
var name2, shader2, gaussianSplattingPixelShader;
var init_gaussianSplatting_fragment = __esm({
  "node_modules/@babylonjs/core/Shaders/gaussianSplatting.fragment.js"() {
    init_shaderStore();
    init_clipPlaneFragmentDeclaration();
    init_logDepthDeclaration();
    init_fogFragmentDeclaration();
    init_gaussianSplattingFragmentDeclaration();
    init_clipPlaneFragment();
    name2 = "gaussianSplattingPixelShader";
    shader2 = `#include<clipPlaneFragmentDeclaration>
#include<logDepthDeclaration>
#include<fogFragmentDeclaration>
varying vec4 vColor;varying vec2 vPosition;
#include<gaussianSplattingFragmentDeclaration>
void main () { 
#include<clipPlaneFragment>
gl_FragColor=gaussianColor(vColor);}
`;
    ShaderStore.ShadersStore[name2] = shader2;
    gaussianSplattingPixelShader = { name: name2, shader: shader2 };
  }
});

export {
  gaussianSplattingPixelShader,
  init_gaussianSplatting_fragment
};
//# sourceMappingURL=chunk-DTRZSHCC.js.map
