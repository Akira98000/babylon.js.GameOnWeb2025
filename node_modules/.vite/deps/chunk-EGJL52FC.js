import {
  init_instancesDeclaration
} from "./chunk-MKBKOF6C.js";
import {
  init_bakedVertexAnimation,
  init_bakedVertexAnimationDeclaration
} from "./chunk-U73FLLBC.js";
import {
  init_instancesVertex
} from "./chunk-GSF5L374.js";
import {
  init_bonesDeclaration
} from "./chunk-MXPRHMVQ.js";
import {
  init_morphTargetsVertexGlobalDeclaration
} from "./chunk-27KEXXJI.js";
import {
  init_morphTargetsVertexDeclaration
} from "./chunk-S4MQZ7UI.js";
import {
  init_morphTargetsVertexGlobal
} from "./chunk-RR2HNGYR.js";
import {
  init_morphTargetsVertex
} from "./chunk-YRZHJLJ6.js";
import {
  init_bonesVertex
} from "./chunk-XX4LGSX3.js";
import {
  ShaderStore,
  init_shaderStore
} from "./chunk-CTSQY2GW.js";
import {
  __esm
} from "./chunk-DZZM6G22.js";

// node_modules/@babylonjs/core/ShadersWGSL/picking.vertex.js
var name, shader, pickingVertexShaderWGSL;
var init_picking_vertex = __esm({
  "node_modules/@babylonjs/core/ShadersWGSL/picking.vertex.js"() {
    init_shaderStore();
    init_bonesDeclaration();
    init_bakedVertexAnimationDeclaration();
    init_morphTargetsVertexGlobalDeclaration();
    init_morphTargetsVertexDeclaration();
    init_instancesDeclaration();
    init_morphTargetsVertexGlobal();
    init_morphTargetsVertex();
    init_instancesVertex();
    init_bonesVertex();
    init_bakedVertexAnimation();
    name = "pickingVertexShader";
    shader = `attribute position: vec3f;
#if defined(INSTANCES)
attribute instanceMeshID: vec4f;
#endif
#include<bonesDeclaration>
#include<bakedVertexAnimationDeclaration>
#include<morphTargetsVertexGlobalDeclaration>
#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]
#include<instancesDeclaration>
uniform viewProjection: mat4x4f;
#if defined(INSTANCES)
varying vMeshID: vec4f;
#endif
@vertex
fn main(input : VertexInputs)->FragmentInputs {
#include<morphTargetsVertexGlobal>
#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]
#include<instancesVertex>
#include<bonesVertex>
#include<bakedVertexAnimation>
var worldPos: vec4f=finalWorld*vec4f(input.position,1.0);vertexOutputs.position=uniforms.viewProjection*worldPos;
#if defined(INSTANCES)
vertexOutputs.vMeshID=input.instanceMeshID;
#endif
}`;
    ShaderStore.ShadersStoreWGSL[name] = shader;
    pickingVertexShaderWGSL = { name, shader };
  }
});

export {
  pickingVertexShaderWGSL,
  init_picking_vertex
};
//# sourceMappingURL=chunk-EGJL52FC.js.map
